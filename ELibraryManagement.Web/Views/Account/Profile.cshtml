@model ELibraryManagement.Web.Models.UserViewModel
@{
    ViewData["Title"] = "Thông tin cá nhân";
}

@section Styles {
    <style>
        /* University Library Profile Styles */
        .profile-container {
            min-height: 100vh;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 2rem 0;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        }

        .profile-card {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            border: 1px solid #e2e8f0;
        }

        .profile-header {
            background: linear-gradient(135deg, #2563eb 0%, #1e3a8a 100%);
            color: white;
            padding: 3rem 2rem;
            text-align: center;
            position: relative;
        }

        .profile-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E") repeat;
            opacity: 0.1;
        }

        .profile-avatar {
            position: relative;
            z-index: 2;
            margin-bottom: 1.5rem;
        }

        .avatar-img,
        .avatar-placeholder {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            margin: 0 auto;
            border: 4px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .avatar-placeholder {
            background: rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
            color: white;
        }

        .profile-info {
            position: relative;
            z-index: 2;
        }

        .profile-name {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        .profile-username,
        .profile-email {
            font-size: 1rem;
            opacity: 0.9;
            margin-bottom: 0.25rem;
        }

        .student-badge {
            display: inline-block;
            background: rgba(255, 255, 255, 0.2);
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-size: 0.875rem;
            font-weight: 600;
            margin-top: 1rem;
            backdrop-filter: blur(10px);
        }

        .profile-body {
            padding: 2.5rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1e3a8a;
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .section-title i {
            color: #2563eb;
            font-size: 1.25rem;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .info-item {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 1.5rem;
            transition: all 0.3s ease;
        }

        .info-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            border-color: #2563eb;
        }

        .info-label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.75rem;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .info-label i {
            color: #2563eb;
            width: 16px;
        }

        .info-value {
            font-size: 1rem;
            color: #1f2937;
            font-weight: 500;
            margin: 0;
            line-height: 1.5;
        }

        .info-value.not-set {
            color: #9ca3af;
            font-style: italic;
        }

        .profile-actions {
            background: #f8fafc;
            padding: 2rem;
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            justify-content: center;
        }

        .btn-profile {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            background: linear-gradient(135deg, #2563eb 0%, #1e3a8a 100%);
            color: white;
            text-decoration: none;
            border-radius: 10px;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 0.875rem;
        }

        .btn-profile:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(37, 99, 235, 0.3);
            color: white;
            text-decoration: none;
        }
    </style>
}

<div class="profile-container">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="profile-card">
                    <div class="profile-header">
                        <div class="profile-avatar">
                            @if (!string.IsNullOrEmpty(Model.AvatarUrl))
                            {
                                var cacheBuster = ViewBag.CacheBuster ?? DateTimeOffset.UtcNow.ToUnixTimeSeconds();
                                var avatarUrlWithCache = Model.AvatarUrl.Contains("?")
                                ? $"{Model.AvatarUrl}&t={cacheBuster}"
                                : $"{Model.AvatarUrl}?t={cacheBuster}";
                                <img src="@avatarUrlWithCache" alt="Avatar" class="avatar-img" />
                            }
                            else
                            {
                                <div class="avatar-placeholder">
                                    <i class="fas fa-user"></i>
                                </div>
                            }
                        </div>
                        <div class="profile-info">
                            <h2 class="profile-name">
                                @if (!string.IsNullOrEmpty(Model.FirstName) || !string.IsNullOrEmpty(Model.LastName))
                                {
                                    @($"{Model.FirstName} {Model.LastName}".Trim())
                                }
                                else
                                {
                                    @Model.UserName
                                }
                            </h2>
                            <p class="profile-username">
                                <i class="fas fa-at me-1"></i>@Model.UserName
                            </p>
                            <p class="profile-email">
                                <i class="fas fa-envelope me-1"></i>
                                @Model.Email
                            </p>
                            @if (!string.IsNullOrEmpty(Model.StudentId))
                            {
                                <div class="student-badge">
                                    <i class="fas fa-graduation-cap me-1"></i>
                                    MSSV: @Model.StudentId
                                </div>
                            }
                        </div>
                    </div>

                    <div class="profile-body">
                        <!-- Success/Error Messages -->
                        @if (TempData["SuccessMessage"] != null)
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert"
                                style="margin: 0 2rem 2rem 2rem; border-radius: 12px; border: none; background: linear-gradient(135deg, #059669 0%, #047857 100%); color: white; box-shadow: 0 4px 15px rgba(5, 150, 105, 0.3);">
                                <i class="fas fa-check-circle me-2"></i>
                                @TempData["SuccessMessage"]
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert"
                                    aria-label="Close"></button>
                            </div>
                        }

                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert"
                                style="margin: 0 2rem 2rem 2rem; border-radius: 12px; border: none; background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%); color: white; box-shadow: 0 4px 15px rgba(220, 38, 38, 0.3);">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @TempData["ErrorMessage"]
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert"
                                    aria-label="Close"></button>
                            </div>
                        }

                        @if (TempData["DebugMessage"] != null)
                        {
                            <div class="alert alert-info alert-dismissible fade show" role="alert"
                                style="margin: 0 2rem 2rem 2rem; border-radius: 12px; border: none; background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); color: white; box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);">
                                <i class="fas fa-bug me-2"></i>
                                <strong>DEBUG:</strong> @TempData["DebugMessage"]
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert"
                                    aria-label="Close"></button>
                            </div>
                        }

                        <h3 class="section-title">
                            <i class="fas fa-info-circle"></i>
                            Thông tin chi tiết
                        </h3>

                        <div class="info-grid">
                            @if (!string.IsNullOrEmpty(Model.StudentId))
                            {
                                <div class="info-item">
                                    <label class="info-label">
                                        <i class="fas fa-graduation-cap"></i>
                                        Mã sinh viên
                                    </label>
                                    <p class="info-value">@Model.StudentId</p>
                                </div>
                            }

                            <div class="info-item">
                                <label class="info-label">
                                    <i class="fas fa-user"></i>
                                    Họ và tên
                                </label>
                                <p
                                    class="info-value @(string.IsNullOrEmpty(Model.FirstName) && string.IsNullOrEmpty(Model.LastName) ? "not-set" : "")">
                                    @if (!string.IsNullOrEmpty(Model.FirstName) ||
                                                                        !string.IsNullOrEmpty(Model.LastName))
                                    {
                                        @($"{Model.FirstName} {Model.LastName}".Trim())
                                    }
                                    else
                                    {
                                        <span>Chưa cập nhật</span>
                                    }
                                </p>
                            </div>

                            <div class="info-item">
                                <label class="info-label">
                                    <i class="fas fa-envelope"></i>
                                    Email
                                </label>
                                <p class="info-value">@Model.Email</p>
                            </div>

                            <div class="info-item">
                                <label class="info-label">
                                    <i class="fas fa-phone"></i>
                                    Số điện thoại
                                </label>
                                <p class="info-value @(string.IsNullOrEmpty(Model.PhoneNumber) ? "not-set" : "")">
                                    @(Model.PhoneNumber ?? "Chưa cập nhật")
                                </p>
                            </div>

                            <div class="info-item">
                                <label class="info-label">
                                    <i class="fas fa-calendar"></i>
                                    Ngày sinh
                                </label>
                                <p class="info-value @(Model.DateOfBirth == null ? "not-set" : "")">
                                    @(Model.DateOfBirth?.ToString("dd/MM/yyyy") ?? "Chưa cập nhật")
                                </p>
                            </div>

                            <div class="info-item">
                                <label class="info-label">
                                    <i class="fas fa-map-marker-alt"></i>
                                    Địa chỉ
                                </label>
                                <p class="info-value @(string.IsNullOrEmpty(Model.Address) ? "not-set" : "")">
                                    @(Model.Address ?? "Chưa cập nhật")
                                </p>
                            </div>

                            <div class="info-item">
                                <label class="info-label">
                                    <i class="fas fa-clock"></i>
                                    Ngày tạo tài khoản
                                </label>
                                <p class="info-value">@Model.CreatedAt.ToString("dd/MM/yyyy HH:mm")</p>
                            </div>
                        </div>
                    </div>

                    <div class="profile-actions">
                        <a asp-controller="Home" asp-action="Index" class="btn-profile">
                            <i class="fas fa-home"></i>
                            Về trang chủ
                        </a>
                        <a asp-controller="Account" asp-action="EditProfile" class="btn-profile">
                            <i class="fas fa-edit"></i>
                            Chỉnh sửa thông tin
                        </a>
                        <a asp-controller="Account" asp-action="ChangePassword" class="btn-profile"
                            style="background: linear-gradient(135deg, #28a745, #20c997);">
                            <i class="fas fa-key"></i>
                            Đổi mật khẩu
                        </a>
                        <form asp-controller="Account" asp-action="Logout" method="post" class="d-inline">
                            <button type="submit" class="btn-profile"
                                style="background: linear-gradient(135deg, #dc3545, #e74c3c);">
                                <i class="fas fa-sign-out-alt"></i>
                                Đăng xuất
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Auto-dismiss alerts after 5 seconds
        document.addEventListener('DOMContentLoaded', function () {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(function (alert) {
                setTimeout(function () {
                    if (alert && !alert.classList.contains('fade')) {
                        alert.classList.add('fade');
                    }
                    setTimeout(function () {
                        if (alert && alert.parentNode) {
                            alert.parentNode.removeChild(alert);
                        }
                    }, 150);
                }, 5000);
            });
        });
    </script>
}