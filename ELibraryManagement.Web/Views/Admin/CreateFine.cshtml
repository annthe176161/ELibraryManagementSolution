@model ELibraryManagement.Web.Models.CreateFineRequest
@using ELibraryManagement.Web.Models
@{
    ViewData["Title"] = "Tạo phạt mới";
    Layout = "_AdminLayout";
    var users = ViewBag.Users as List<ELibraryManagement.Web.Models.AdminUserViewModel> ?? new
    List<ELibraryManagement.Web.Models.AdminUserViewModel>();
    var selectedUserId = ViewBag.SelectedUserId as string;
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">
            <i class="fas fa-plus-circle"></i>
            Tạo phạt mới
        </h1>
        <a href="@Url.Action("Fines")" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i>
            Quay lại danh sách
        </a>
    </div>

    <div class="row">
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-edit"></i>
                        Thông tin phạt
                    </h6>
                </div>
                <div class="card-body">
                    <form asp-action="CreateFine" method="post" id="createFineForm">
                        <!-- Hidden field to store fine type -->
                        <input type="hidden" id="selectedFineType" name="FineType" value="" />

                        <!-- Loại phạt -->
                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="form-label">
                                        <i class="fas fa-tags"></i>
                                        Loại phạt <span class="text-danger">*</span>
                                    </label>
                                    <select id="fineType" class="form-control" required>
                                        <option value="">-- Chọn loại phạt --</option>
                                        <option value="overdue">Trả sách muộn (5,000 VND)</option>
                                        <option value="lost">Mất sách (200,000 VND)</option>
                                        <option value="damaged">Làm hỏng sách (50,000 VND)</option>
                                        <option value="other">Vi phạm khác (Tự định nghĩa)</option>
                                    </select>
                                    <small class="form-text text-muted">
                                        Chọn loại phạt để tự động điền thông tin và cập nhật trạng thái tương ứng
                                    </small>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="UserId" class="form-label">
                                        Sinh viên <span class="text-danger">*</span>
                                    </label>
                                    <select asp-for="UserId" class="form-control select2" required>
                                        <option value="">-- Chọn sinh viên --</option>
                                        @foreach (var user in users)
                                        {
                                            <option value="@user.Id" data-email="@user.Email"
                                                selected="@(selectedUserId == user.Id)">
                                                @user.FullName (@user.Email)
                                            </option>
                                        }
                                    </select>
                                    <span asp-validation-for="UserId" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="BorrowRecordId" class="form-label">
                                        Bản ghi mượn sách (tuỳ chọn)
                                    </label>
                                    <select asp-for="BorrowRecordId" class="form-control" id="borrowRecordSelect">
                                        <option value="">-- Không liên quan đến mượn sách --</option>
                                    </select>
                                    <span asp-validation-for="BorrowRecordId" class="text-danger"></span>
                                    <small class="form-text text-muted">
                                        Chọn sinh viên trước để xem các bản ghi mượn sách
                                    </small>
                                    <div id="borrowRecordStatus" class="mt-2 text-muted small"></div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="Amount" class="form-label">
                                        Số tiền phạt (VND) <span class="text-danger">*</span>
                                    </label>
                                    <input asp-for="Amount" type="number" class="form-control" min="1000" max="10000000"
                                        step="1000" placeholder="Nhập số tiền phạt..." required>
                                    <span asp-validation-for="Amount" class="text-danger"></span>
                                    <small class="form-text text-muted">
                                        Từ 1,000 đến 10,000,000 VND
                                    </small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="DueDate" class="form-label">
                                        Hạn thanh toán
                                    </label>
                                    <input asp-for="DueDate" type="date" class="form-control"
                                        min="@DateTime.Now.ToString("yyyy-MM-dd")"
                                        value="@DateTime.Now.AddDays(30).ToString("yyyy-MM-dd")">
                                    <span asp-validation-for="DueDate" class="text-danger"></span>
                                    <small class="form-text text-muted">
                                        Mặc định 30 ngày từ hôm nay
                                    </small>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label asp-for="Reason" class="form-label">
                                Lý do phạt <span class="text-danger">*</span>
                            </label>
                            <input asp-for="Reason" type="text" class="form-control" placeholder="Nhập lý do phạt..."
                                maxlength="100" required>
                            <span asp-validation-for="Reason" class="text-danger"></span>
                            <small class="form-text text-muted">
                                Tối đa 100 ký tự
                            </small>
                        </div>

                        <div class="form-group">
                            <label asp-for="Description" class="form-label">
                                Mô tả chi tiết
                            </label>
                            <textarea asp-for="Description" class="form-control" rows="4"
                                placeholder="Nhập mô tả chi tiết về lý do phạt..." maxlength="500"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                            <small class="form-text text-muted">
                                Tối đa 500 ký tự
                            </small>
                        </div>

                        <div class="form-group">
                            <div class="d-flex justify-content-between">
                                <a href="@Url.Action("Fines")" class="btn btn-secondary">
                                    <i class="fas fa-times"></i>
                                    Hủy
                                </a>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i>
                                    Tạo phạt
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-xl-4 col-lg-5">
            <!-- Quick Actions -->
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-lightbulb"></i>
                        Gợi ý số tiền phạt
                    </h6>
                </div>
                <div class="card-body">
                    <div class="list-group">
                        <button type="button" class="list-group-item list-group-item-action" onclick="setAmount(5000)">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">Trả muộn sách</h6>
                                <small class="text-success">5,000 VND/ngày</small>
                            </div>
                            <p class="mb-1">Phạt tiêu chuẩn cho việc trả sách muộn.</p>
                        </button>

                        <button type="button" class="list-group-item list-group-item-action" onclick="setAmount(50000)">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">Làm hỏng sách</h6>
                                <small class="text-warning">50,000 VND</small>
                            </div>
                            <p class="mb-1">Phạt cho việc làm hỏng sách nhẹ.</p>
                        </button>

                        <button type="button" class="list-group-item list-group-item-action"
                            onclick="setAmount(200000)">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">Mất sách</h6>
                                <small class="text-danger">200,000 VND</small>
                            </div>
                            <p class="mb-1">Phạt cho việc làm mất sách hoàn toàn.</p>
                        </button>

                        <button type="button" class="list-group-item list-group-item-action" onclick="setAmount(20000)">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">Vi phạm quy định</h6>
                                <small class="text-info">20,000 VND</small>
                            </div>
                            <p class="mb-1">Phạt cho các vi phạm quy định khác.</p>
                        </button>
                    </div>
                </div>
            </div>

            <!-- User Info -->
            <div class="card shadow mb-4" id="userInfoCard" style="display: none;">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-user"></i>
                        Thông tin sinh viên
                    </h6>
                </div>
                <div class="card-body" id="userInfoContent">
                    <!-- User info will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize select2 for better UX (guarded in case library isn't loaded)
            if ($.fn && $.fn.select2) {
                $('.select2').select2({
                    placeholder: '-- Chọn sinh viên --',
                    allowClear: true
                });
            } else {
                // Avoid throwing a TypeError which is caught by global handler
                console.warn('select2 is not available. Skipping select2 initialization.');
            }

            // Load user info and borrow records when user is selected
            $('#UserId').change(function () {
                const userId = $(this).val();
                if (userId) {
                    loadUserInfo(userId);
                    loadUserBorrowRecords(userId);
                } else {
                    $('#userInfoCard').hide();
                    $('#borrowRecordSelect').html('<option value="">-- Không liên quan đến mượn sách --</option>');
                }
            });

            // Handle fine type selection
            $('#fineType').change(function () {
                const fineType = $(this).val();
                updateFormBasedOnFineType(fineType);
            });

            // If a user is pre-selected, load their info
            const preSelectedUserId = '@selectedUserId';
            if (preSelectedUserId) {
                loadUserInfo(preSelectedUserId);
                loadUserBorrowRecords(preSelectedUserId);
            }
        });

        function setAmount(amount) {
            $('#Amount').val(amount);

            // Set appropriate reason based on amount
            if (amount === 5000) {
                $('#Reason').val('Trả sách muộn');
                $('#Description').val('Phạt tiêu chuẩn cho việc trả sách quá hạn theo quy định thư viện.');
            } else if (amount === 50000) {
                $('#Reason').val('Làm hỏng sách');
                $('#Description').val('Sách bị hỏng nhẹ, cần sửa chữa hoặc thay thế.');
            } else if (amount === 200000) {
                $('#Reason').val('Mất sách');
                $('#Description').val('Sách bị mất hoàn toàn, cần bồi thường theo giá trị sách.');
            } else if (amount === 20000) {
                $('#Reason').val('Vi phạm quy định thư viện');
                $('#Description').val('Vi phạm các quy định khác của thư viện.');
            }
        }

        function updateFormBasedOnFineType(fineType) {
            // Save selected fine type to hidden field
            $('#selectedFineType').val(fineType);

            // Reset form fields first
            $('#Amount').val('');
            $('#Reason').val('');
            $('#Description').val('');

            switch (fineType) {
                case 'overdue':
                    $('#Amount').val(5000);
                    $('#Reason').val('Trả sách muộn');
                    $('#Description').val('Phạt tiêu chuẩn cho việc trả sách quá hạn theo quy định thư viện.');
                    break;

                case 'lost':
                    $('#Amount').val(200000);
                    $('#Reason').val('Mất sách');
                    $('#Description').val('Sách bị mất hoàn toàn, cần bồi thường theo giá trị sách.');
                    break;

                case 'damaged':
                    $('#Amount').val(50000);
                    $('#Reason').val('Làm hỏng sách');
                    $('#Description').val('Sách bị hỏng nhẹ, cần sửa chữa hoặc thay thế.');
                    break;

                case 'other':
                    $('#Amount').val(20000);
                    $('#Reason').val('Vi phạm quy định thư viện');
                    $('#Description').val('Vi phạm các quy định khác của thư viện.');
                    break;

                default:
                    // Leave fields empty for custom input
                    break;
            }
        }

        function loadUserInfo(userId) {
            // Show loading
            $('#userInfoContent').html('<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Đang tải...</div>');
            $('#userInfoCard').show();

            // Load user basic info (from the selected option)
            const selectedOption = $(`#UserId option[value="${userId}"]`);
            const userName = selectedOption.text().split('(')[0].trim();
            const userEmail = selectedOption.data('email');

            $('#userInfoContent').html(`
                                    <div class="row">
                                        <div class="col-12">
                                            <h6>${userName}</h6>
                                            <p class="text-muted mb-2">${userEmail}</p>
                                        </div>
                                    </div>
                                `);

            // Load additional user info via AJAX (fines, etc.)
            $.get('@Url.Action("GetUserFines")', { userId: userId }, function (response) {
                if (response.success && response.data.length > 0) {
                    let finesHtml = '<hr><h6>Phạt hiện tại:</h6><ul class="list-unstyled">';
                    let totalPending = 0;

                    response.data.forEach(function (fine) {
                        if (fine.status === 'Pending') {
                            totalPending += fine.amount;
                            finesHtml += `<li><small class="text-warning">• ${fine.reason}: ${fine.amount.toLocaleString()} VND</small></li>`;
                        }
                    });

                    finesHtml += '</ul>';

                    if (totalPending > 0) {
                        finesHtml += `<div class="alert alert-warning alert-sm p-2"><small><strong>Tổng nợ:</strong> ${totalPending.toLocaleString()} VND</small></div>`;
                    }

                    $('#userInfoContent').append(finesHtml);
                }
            });
        }

        function loadUserBorrowRecords(userId) {
            // Disable select while loading to prevent user interaction
            $('#borrowRecordSelect').prop('disabled', true).html('<option value="">Đang tải...</option>');
            $('#borrowRecordStatus').text('Đang tải bản ghi mượn...');

            // Call Admin controller action explicitly so the request goes via the web app (includes token)
            const url = '@Url.Action("GetUserActiveBorrowRecords", "Admin")';

            $.get(url, { userId: userId }, function (response) {
                let options = '<option value="">-- Không liên quan đến mượn sách --</option>';

                if (!response) {
                    console.warn('No response from GetUserActiveBorrowRecords');
                    $('#borrowRecordSelect').html('<option value="">-- Lỗi tải dữ liệu --</option>').prop('disabled', false).trigger('change');
                    $('#borrowRecordStatus').text('Không có phản hồi từ server.');
                    return;
                }

                if (!response.success) {
                    console.warn('GetUserActiveBorrowRecords returned error:', response.message || response.detail || response);

                    if (response.message === 'MissingAuthToken') {
                        $('#borrowRecordSelect').html('<option value="">-- Yêu cầu đăng nhập (token không có) --</option>').prop('disabled', false).trigger('change');
                        $('#borrowRecordStatus').html('Token đăng nhập bị thiếu. <a href="@Url.Action("Login", "Account")">Đăng nhập lại</a>');
                        return;
                    }

                    if (response.message === 'TokenExpired') {
                        $('#borrowRecordSelect').html('<option value="">-- Token hết hạn --</option>').prop('disabled', false).trigger('change');
                        $('#borrowRecordStatus').html('Token đăng nhập đã hết hạn. <a href="@Url.Action("Login", "Account")">Đăng nhập lại</a>');
                        return;
                    }

                    // show detailed error in status area
                    $('#borrowRecordSelect').html('<option value="">-- Lỗi tải dữ liệu --</option>').prop('disabled', false).trigger('change');
                    const detail = response.detail || response.message || 'Không thể tải dữ liệu';
                    $('#borrowRecordStatus').text('Lỗi API: ' + detail);

                    // If status is 401, suggest re-login
                    if (response.status === 401) {
                        $('#borrowRecordStatus').html('Lỗi xác thực (401). <a href="@Url.Action("Login", "Account")">Đăng nhập lại</a>');
                    }
                    return;
                }

                const data = response.data || [];
                if (data.length === 0) {
                    $('#borrowRecordSelect').html('<option value="">-- Không có bản ghi đang mượn hoặc quá hạn --</option>').prop('disabled', false).trigger('change');
                    $('#borrowRecordStatus').text('Không tìm thấy bản ghi đang mượn hoặc quá hạn cho sinh viên này.');
                    return;
                }

                data.forEach(function (record) {
                    // Accept both camelCase and PascalCase property names from different serializers
                    const id = record.id ?? record.Id;
                    const bookTitle = record.bookTitle ?? record.BookTitle ?? 'Không rõ tên sách';
                    const borrowDate = record.borrowDate ?? record.BorrowDate;
                    const dueDate = record.dueDate ?? record.DueDate;
                    const status = record.status ?? record.Status ?? '';
                    const isOverdue = (typeof record.isOverdue !== 'undefined') ? record.isOverdue : (record.IsOverdue ?? false);
                    const overdueDays = record.overdueDays ?? record.OverdueDays ?? 0;

                    const statusText = status === 'Borrowed' ? 'Đang mượn' : (status === 'Overdue' ? 'Quá hạn' : status);
                    const overdueText = isOverdue ? ` (Quá hạn ${overdueDays} ngày)` : '';

                    let borrowDateText = '';
                    let dueDateText = '';
                    try {
                        if (borrowDate) borrowDateText = new Date(borrowDate).toLocaleDateString('vi-VN');
                        if (dueDate) dueDateText = new Date(dueDate).toLocaleDateString('vi-VN');
                    } catch (e) {
                        borrowDateText = '';
                        dueDateText = '';
                    }

                    const displayText = `${bookTitle} - ${statusText}${overdueText}${(borrowDateText ? ` (Mượn: ${borrowDateText}` : '')}${(dueDateText ? `, Hạn: ${dueDateText})` : (borrowDateText ? ')' : ''))}`;

                    options += `<option value="${id}">${displayText}</option>`;
                });

                // Populate and enable select, trigger change so select2 updates
                $('#borrowRecordSelect').html(options).prop('disabled', false).trigger('change');

                // Update status message with count
                $('#borrowRecordStatus').text(data.length + ' bản ghi đang mượn / quá hạn được tải.');
            }).fail(function (jqxhr, textStatus, error) {
                console.error('AJAX error loading borrow records:', textStatus, error, jqxhr.responseText);
                $('#borrowRecordSelect').html('<option value="">-- Lỗi tải dữ liệu --</option>').prop('disabled', false).trigger('change');
                $('#borrowRecordStatus').text('Lỗi khi tải bản ghi mượn. Kiểm tra console để biết chi tiết.');
            });
        }

        // Form validation
        $('#createFineForm').submit(function (e) {
            const amount = parseInt($('#Amount').val());
            const reason = $('#Reason').val().trim();

            if (!reason) {
                e.preventDefault();
                alert('Vui lòng nhập lý do phạt');
                return false;
            }

            if (amount < 1000 || amount > 10000000) {
                e.preventDefault();
                alert('Số tiền phạt phải từ 1,000 đến 10,000,000 VND');
                return false;
            }

            return true;
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}