@model List<BorrowRecordViewModel>

@{
    ViewData["Title"] = "Quản lý mượn sách - E-Library";
    Layout = "_AdminLayout";
}

<!-- Page Header -->
<div class="row mb-4">
    <div class="col-12">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h2 class="h3 mb-0">
                        <i class="fas fa-clipboard-list me-2 text-info"></i>
                        Quản lý mượn sách
                    </h2>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a asp-action="Index">Quản trị</a>
                            </li>
                            <li class="breadcrumb-item active">Mượn sách</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Row -->
    <div class="row mb-4">
        <div class="col-md-2">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Tổng lượt mượn</div>
                            <div class="h4 mb-0">@Model.Count</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-clipboard-list fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Đã đăng ký</div>
                            <div class="h4 mb-0">@Model.Count(b => b.Status == "Requested")</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-clock fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Đang mượn</div>
                            <div class="h4 mb-0">@Model.Count(b => b.Status == "Borrowed")</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-hand-holding fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Quá hạn</div>
                            <div class="h4 mb-0">@Model.Count(b => b.IsOverdue)</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-exclamation-triangle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Đã trả</div>
                            <div class="h4 mb-0">@Model.Count(b => b.Status == "Returned")</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-check-circle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-2">
            <div class="card bg-secondary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Đã hủy</div>
                            <div class="h4 mb-0">@Model.Count(b => b.Status == "Cancelled")</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-times-circle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Borrow Records Table -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-light">
                    <div class="d-flex align-items-center justify-content-between">
                        <h5 class="mb-0">Danh sách mượn sách</h5>
                        <div class="d-flex">
                            <div class="input-group input-group-sm me-3" style="width: 300px;">
                                <input type="text" class="form-control" placeholder="Tìm kiếm..." id="searchInput">
                                <button class="btn btn-outline-secondary" type="button">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                            <select class="form-select form-select-sm" id="statusFilter" style="width: 150px;">
                                <option value="">Tất cả trạng thái</option>
                                <option value="requested">Đã đăng ký</option>
                                <option value="borrowed">Đang mượn</option>
                                <option value="overdue">Quá hạn</option>
                                <option value="returned">Đã trả</option>
                                <option value="cancelled">Đã hủy</option>
                                <option value="lost">Mất sách</option>
                                <option value="damaged">Hư hỏng</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="borrowsTable">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col">Người mượn</th>
                                    <th scope="col">Sách</th>
                                    <th scope="col">Ngày yêu cầu/Ngày mượn</th>
                                    <th scope="col">Hạn trả</th>
                                    <th scope="col">Ngày trả</th>
                                    <th scope="col">Trạng thái</th>
                                    <th scope="col">Phí phạt</th>
                                    <th scope="col">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var borrow in Model.OrderByDescending(b => b.BorrowDate))
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar avatar-sm me-2">
                                                    <i class="fas fa-user-circle fa-2x text-muted"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-0">@borrow.UserName</h6>
                                                    <small class="text-muted">@borrow.UserEmail</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div>
                                                <h6 class="mb-1">@borrow.BookTitle</h6>
                                                <small class="text-muted">@borrow.BookAuthor</small>
                                            </div>
                                        </td>
                                        <td>
                                            @if (borrow.Status == "Requested")
                                            {
                                                <div>
                                                    <small class="text-primary fw-bold">Ngày yêu cầu:</small><br>
                                                    <small>@borrow.BorrowDate.ToString("dd/MM/yyyy")</small>
                                                </div>
                                            }
                                            else
                                            {
                                                <div>
                                                    <small class="text-success fw-bold">Ngày mượn:</small><br>
                                                    <small>@(borrow.ConfirmedDate.HasValue ? borrow.ConfirmedDate.Value.ToString("dd/MM/yyyy") : borrow.BorrowDate.ToString("dd/MM/yyyy"))</small>
                                                </div>
                                            }
                                        </td>
                                        <td>
                                            <small class="@(borrow.IsOverdue ? "text-danger fw-bold" : "")">
                                                @borrow.DueDate.ToString("dd/MM/yyyy")
                                            </small>
                                        </td>
                                        <td>
                                            @if (borrow.ReturnDate.HasValue)
                                            {
                                                <small>@borrow.ReturnDate.Value.ToString("dd/MM/yyyy")</small>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Chưa trả</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-@borrow.StatusClass">@borrow.StatusDisplay</span>
                                            @if (borrow.IsOverdue)
                                            {
                                                <br><small class="text-danger">Quá hạn @borrow.OverdueDays ngày</small>
                                            }
                                        </td>
                                        <td>
                                            @if (borrow.FineAmount.HasValue && borrow.FineAmount.Value > 0)
                                            {
                                                <span class="fw-bold text-danger">@borrow.FineAmount.Value.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Không có phạt</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-sm btn-outline-primary" title="Xem chi tiết" onclick="viewBorrow(@borrow.Id)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                
                                                @* Status transition buttons based on current status *@
                                                @if (borrow.Status == "Requested")
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-success" title="Phê duyệt mượn sách" onclick="approveBorrow(@borrow.Id, '@borrow.UserName', '@borrow.BookTitle')">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-outline-danger" title="Từ chối yêu cầu" onclick="rejectBorrow(@borrow.Id, '@borrow.UserName', '@borrow.BookTitle')">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                }
                                                else if (borrow.Status == "Borrowed")
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-success" title="Xác nhận trả sách" onclick="returnBook(@borrow.Id, '@borrow.UserName', '@borrow.BookTitle')">
                                                        <i class="fas fa-undo"></i>
                                                    </button>
                                                    @if (borrow.IsOverdue)
                                                    {
                                                        <button type="button" class="btn btn-sm btn-outline-warning" title="Gửi nhắc nhở" onclick="sendReminder(@borrow.Id, '@borrow.UserEmail')">
                                                            <i class="fas fa-bell"></i>
                                                        </button>
                                                    }
                                                }
                                                else if (borrow.Status == "Returned" || borrow.Status == "Cancelled" || borrow.Status == "Lost" || borrow.Status == "Damaged")
                                                {
                                                    @* Final states - compact display *@
                                                    <span class="badge bg-secondary" title="Trạng thái cuối - không thể thay đổi">
                                                        <i class="fas fa-lock"></i>
                                                    </span>
                                                }
                                                
                                                <div class="btn-group" role="group">
                                                    <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                                        <i class="fas fa-cog"></i>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        @if (borrow.Status == "Borrowed")
                                                        {
                                                            <li><a class="dropdown-item text-warning" href="#" onclick="markAsLost(@borrow.Id)"><i class="fas fa-question-circle me-2"></i>Báo mất sách</a></li>
                                                            <li><a class="dropdown-item text-warning" href="#" onclick="markAsDamaged(@borrow.Id)"><i class="fas fa-exclamation-circle me-2"></i>Báo hư hỏng</a></li>
                                                        }
                                                        <li><a class="dropdown-item" href="#" onclick="viewHistory('@borrow.UserId')"><i class="fas fa-history me-2"></i>Lịch sử mượn</a></li>
                                                        @if (!string.IsNullOrEmpty(borrow.Notes))
                                                        {
                                                            <li><hr class="dropdown-divider"></li>
                                                            <li><a class="dropdown-item" href="#" onclick="viewNotes(@borrow.Id)"><i class="fas fa-sticky-note me-2"></i>Xem ghi chú</a></li>
                                                        }
                                                        @if (borrow.Status != "Returned" && borrow.Status != "Cancelled" && borrow.Status != "Lost" && borrow.Status != "Damaged")
                                                        {
                                                            <li><hr class="dropdown-divider"></li>
                                                            <li><a class="dropdown-item" href="#" onclick="editNotes(@borrow.Id)"><i class="fas fa-edit me-2"></i>Thêm ghi chú</a></li>
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            Hiển thị @Model.Count giao dịch mượn
                        </small>
                        <nav>
                            <ul class="pagination pagination-sm mb-0">
                                <li class="page-item disabled">
                                    <span class="page-link">Trước</span>
                                </li>
                                <li class="page-item active">
                                    <span class="page-link">1</span>
                                </li>
                                <li class="page-item disabled">
                                    <span class="page-link">Sau</span>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Extend Due Date Modal -->
<!-- View Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Chi tiết giao dịch mượn</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="borrowDetails">
                    <!-- Details will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<!-- Return Book Modal -->
<div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnModalLabel">Xác nhận trả sách</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Xác nhận người dùng đã trả sách?</p>
                <div id="returnDetails"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-success" id="confirmReturn">Xác nhận trả</button>
            </div>
        </div>
    </div>
</div>

<!-- Status Update Confirmation Modal -->
<div class="modal fade" id="statusUpdateModal" tabindex="-1" aria-labelledby="statusUpdateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="statusUpdateModalLabel">Xác nhận cập nhật trạng thái</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Lưu ý:</strong> Thao tác này có thể không thể hoàn tác.
                </div>
                <div id="statusUpdateDetails">
                    <!-- Will be populated dynamically -->
                </div>
                <div class="mt-3">
                    <label for="statusUpdateNotes" class="form-label">Ghi chú (tùy chọn):</label>
                    <textarea class="form-control" id="statusUpdateNotes" rows="3" placeholder="Nhập ghi chú về thay đổi trạng thái này..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" id="confirmStatusUpdate">Xác nhận cập nhật</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Search functionality
            $('#searchInput').on('keyup', function() {
                var value = $(this).val().toLowerCase();
                $('#borrowsTable tbody tr').filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });

            // Status filter
            $('#statusFilter').on('change', function() {
                var value = $(this).val();
                $('#borrowsTable tbody tr').filter(function() {
                    if (value === '') {
                        $(this).show();
                    } else {
                        var statusText = $(this).find('.badge').text().toLowerCase();
                        if (value === 'requested') {
                            $(this).toggle(statusText.indexOf('đã đăng ký') > -1);
                        } else if (value === 'borrowed') {
                            $(this).toggle(statusText.indexOf('đang mượn') > -1);
                        } else if (value === 'overdue') {
                            $(this).toggle(statusText.indexOf('quá hạn') > -1);
                        } else if (value === 'returned') {
                            $(this).toggle(statusText.indexOf('đã trả') > -1);
                        } else if (value === 'cancelled') {
                            $(this).toggle(statusText.indexOf('đã hủy') > -1);
                        } else if (value === 'lost') {
                            $(this).toggle(statusText.indexOf('mất sách') > -1);
                        } else if (value === 'damaged') {
                            $(this).toggle(statusText.indexOf('hư hỏng') > -1);
                        }
                    }
                });
            });
        });

        let currentBorrowId = null;
        let currentStatusUpdate = null; // For storing status update information

        function viewBorrow(borrowId) {
            // Show borrow details in modal
            $('#detailsModal').modal('show');
            
            // Show loading spinner
            $('#borrowDetails').html('<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>');
            
            // Fetch details from API
            $.ajax({
                url: `/Admin/GetBorrowDetail/${borrowId}`,
                type: 'GET',
                success: function(response) {
                    if (response.success && response.data) {
                        // Normalize property names coming from server (support camelCase and PascalCase)
                        const raw = response.data;
                        const data = {
                            Id: raw.Id ?? raw.id,
                            UserName: raw.UserName || raw.userName || '',
                            UserEmail: raw.UserEmail || raw.userEmail || '',
                            StudentId: raw.StudentId || raw.studentId || '',
                            UserPhoneNumber: raw.UserPhoneNumber || raw.userPhoneNumber || '',
                            BookTitle: raw.BookTitle || raw.bookTitle || '',
                            BookAuthor: raw.BookAuthor || raw.bookAuthor || '',
                            BookIsbn: raw.BookIsbn || raw.bookIsbn || '',
                            BookCoverUrl: raw.BookCoverUrl || raw.bookCoverUrl || '',
                            BorrowDate: raw.BorrowDate || raw.borrowDate || null,
                            ConfirmedDate: raw.ConfirmedDate || raw.confirmedDate || null,
                            DueDate: raw.DueDate || raw.dueDate || null,
                            ReturnDate: raw.ReturnDate || raw.returnDate || null,
                            Status: raw.Status || raw.status || '',
                            Notes: raw.Notes || raw.notes || '',
                            FineAmount: raw.FineAmount ?? raw.fineAmount ?? null,
                            IsOverdue: raw.IsOverdue ?? raw.isOverdue ?? false,
                            OverdueDays: raw.OverdueDays ?? raw.overdueDays ?? 0,
                            StatusDisplay: raw.StatusDisplay || raw.statusDisplay || '',
                            StatusClass: raw.StatusClass || raw.statusClass || '',
                            FormattedBorrowDate: raw.FormattedBorrowDate || raw.formattedBorrowDate || (raw.BorrowDate || raw.borrowDate ? new Date(raw.BorrowDate || raw.borrowDate).toLocaleString('vi-VN', { hour: '2-digit', minute: '2-digit', day: '2-digit', month: '2-digit', year: 'numeric' }) : ''),
                            FormattedDueDate: raw.FormattedDueDate || raw.formattedDueDate || (raw.DueDate || raw.dueDate ? new Date(raw.DueDate || raw.dueDate).toLocaleDateString('vi-VN') : ''),
                            FormattedReturnDate: raw.FormattedReturnDate || raw.formattedReturnDate || (raw.ReturnDate || raw.returnDate ? new Date(raw.ReturnDate || raw.returnDate).toLocaleString('vi-VN', { hour: '2-digit', minute: '2-digit' }) : '')
                        };
                        $('#borrowDetails').html(`
                            <div class="row">
                                <div class="col-md-6">
                                    <h6>Thông tin người mượn</h6>
                                    <p><strong>Họ tên:</strong> ${data.UserName || 'Không có thông tin'}</p>
                                    <p><strong>Email:</strong> ${data.UserEmail || 'Không có thông tin'}</p>
                                    <p><strong>Mã sinh viên:</strong> ${data.StudentId || 'Không có thông tin'}</p>
                                    <p><strong>Số điện thoại:</strong> ${data.UserPhoneNumber || 'Không có thông tin'}</p>
                                </div>
                                <div class="col-md-6">
                                    <h6>Thông tin sách</h6>
                                    <p><strong>Tên sách:</strong> ${data.BookTitle || 'Không có thông tin'}</p>
                                    <p><strong>Tác giả:</strong> ${data.BookAuthor || 'Không có thông tin'}</p>
                                    <p><strong>ISBN:</strong> ${data.BookIsbn || 'Không có thông tin'}</p>
                                    ${data.BookCoverUrl ? `<img src="${data.BookCoverUrl}" alt="Book Cover" class="img-thumbnail" style="max-width: 120px;">` : ''}
                                </div>
                            </div>
                            <hr>
                            <div class="row">
                                <div class="col-12">
                                    <h6>Thông tin mượn trả</h6>
                                    ${data.Status === 'Requested' ?
                                        `<p><strong>Ngày yêu cầu:</strong> <span class="text-primary fw-bold">${data.FormattedBorrowDate || 'Không có thông tin'}</span></p>` :
                                        `<p><strong>Ngày mượn:</strong> <span class="text-success fw-bold">${data.ConfirmedDate ? new Date(data.ConfirmedDate).toLocaleDateString('vi-VN') + ' ' + new Date(data.ConfirmedDate).toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'}) : (data.FormattedBorrowDate || 'Không có thông tin')}</span></p>`
                                    }
                                    <p><strong>Ngày đến hạn:</strong> ${data.FormattedDueDate || 'Không có thông tin'}</p>
                                    <p><strong>Ngày trả:</strong> ${data.FormattedReturnDate || 'Chưa trả'}</p>
                                    <p><strong>Trạng thái:</strong> <span class="badge bg-${data.StatusClass}">${data.StatusDisplay || 'Không có thông tin'}</span></p>
                                    ${data.IsOverdue ? `<p><strong>Số ngày quá hạn:</strong> <span class="text-danger">${data.OverdueDays} ngày</span></p>` : ''}
                                    <p><strong>Ghi chú:</strong> ${data.Notes || 'Không có ghi chú'}</p>
                                    ${data.FineAmount ? `<p><strong>Tiền phạt:</strong> <span class="text-danger">${data.FineAmount.toLocaleString('vi-VN')} VND</span></p>` : ''}
                                </div>
                            </div>
                            <hr>
                            <div class="row">
                                <div class="col-12">
                                    <h6>Cập nhật trạng thái</h6>
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-success btn-sm" onclick="confirmUpdateBorrowStatus(${data.Id}, 'Returned', '${(data.UserName || '').replace(/'/g, "\\'")}', '${(data.BookTitle || '').replace(/'/g, "\\'")}')">
                                            <i class="bi bi-check-circle"></i> Đã trả
                                        </button>
                                        <button type="button" class="btn btn-warning btn-sm" onclick="confirmUpdateBorrowStatus(${data.Id}, 'Overdue', '${(data.UserName || '').replace(/'/g, "\\'")}', '${(data.BookTitle || '').replace(/'/g, "\\'")}')">
                                            <i class="bi bi-exclamation-triangle"></i> Quá hạn
                                        </button>
                                        <button type="button" class="btn btn-primary btn-sm" onclick="confirmUpdateBorrowStatus(${data.Id}, 'Borrowed', '${(data.UserName || '').replace(/'/g, "\\'")}', '${(data.BookTitle || '').replace(/'/g, "\\'")}')">
                                            <i class="bi bi-book"></i> Đang mượn
                                        </button>
                                    </div>
                                </div>
                            </div>
                        `);
                    } else {
                        $('#borrowDetails').html('<div class="alert alert-danger">Không thể tải thông tin chi tiết: ' + (response.message || 'Lỗi không xác định') + '</div>');
                    }
                },
                error: function(xhr, status, error) {
                    $('#borrowDetails').html('<div class="alert alert-danger">Có lỗi xảy ra khi tải thông tin chi tiết</div>');
                }
            });
        }

        function returnBook(borrowId, userName, bookTitle) {
            currentBorrowId = borrowId;
            $('#returnDetails').html(`
                <strong>Người mượn:</strong> ${userName}<br>
                <strong>Sách:</strong> ${bookTitle}
            `);
            $('#returnModal').modal('show');
        }

        $('#confirmReturn').on('click', function() {
            if (currentBorrowId) {
                // Call API to confirm return
                const token = localStorage.getItem('token');
                
                $.ajax({
                    url: `/Admin/ConfirmReturn`,
                    type: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    data: {
                        id: currentBorrowId
                    },
                    success: function(response) {
                        $('#returnModal').modal('hide');
                        showToast('success', 'Sách đã được xác nhận trả thành công!');
                        setTimeout(() => location.reload(), 1500);
                    },
                    error: function(xhr) {
                        showToast('error', 'Có lỗi xảy ra khi xác nhận trả sách: ' + xhr.responseText);
                    }
                });
            }
        });

        function sendReminder(borrowId, userEmail) {
            const token = localStorage.getItem('token');
            
            $.ajax({
                url: `/Admin/SendReminder`,
                type: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + token
                },
                data: {
                    borrowId: borrowId
                },
                success: function(response) {
                    showToast('success', `Đã gửi email nhắc nhở đến ${userEmail}`);
                },
                error: function(xhr) {
                    showToast('error', 'Có lỗi xảy ra khi gửi email nhắc nhở: ' + xhr.responseText);
                }
            });
        }

        function viewHistory(userId) {
            // Redirect to user history page or show in modal
            showToast('info', 'Chức năng xem lịch sử sẽ được triển khai sau');
        }

        function viewNotes(borrowId) {
            // Show notes in modal or tooltip
            showToast('info', 'Hiển thị ghi chú cho giao dịch #' + borrowId);
        }

        // Enhanced status transition functions with validation
        function approveBorrow(borrowId, userName, bookTitle) {
            if (confirm(`Phê duyệt yêu cầu mượn sách?\n\nNgười mượn: ${userName}\nSách: ${bookTitle}`)) {
                $.ajax({
                    url: `/Admin/ApproveBorrowRequest/${borrowId}`,
                    type: 'POST',
                    success: function(response) {
                        if (response.success) {
                            showToast('success', response.message);
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showToast('error', response.message);
                        }
                    },
                    error: function(xhr) {
                        showToast('error', 'Lỗi khi phê duyệt: ' + xhr.responseText);
                    }
                });
            }
        }

        function rejectBorrow(borrowId, userName, bookTitle) {
            const reason = prompt(`Từ chối yêu cầu mượn sách?\n\nNgười mượn: ${userName}\nSách: ${bookTitle}\n\nVui lòng nhập lý do từ chối:`);
            if (reason !== null && reason.trim() !== '') {
                updateBorrowStatus(borrowId, 'Cancelled', `Yêu cầu bị từ chối: ${reason}`);
            }
        }

        function markAsLost(borrowId) {
            const reason = prompt('Báo mất sách. Vui lòng nhập lý do chi tiết:');
            if (reason !== null && reason.trim() !== '') {
                updateBorrowStatus(borrowId, 'Lost', `Sách bị mất: ${reason}`);
            }
        }

        function markAsDamaged(borrowId) {
            const reason = prompt('Báo hư hỏng sách. Vui lòng nhập mô tả tình trạng:');
            if (reason !== null && reason.trim() !== '') {
                updateBorrowStatus(borrowId, 'Damaged', `Sách bị hư hỏng: ${reason}`);
            }
        }

        function editNotes(borrowId) {
            const notes = prompt('Nhập ghi chú cho giao dịch mượn này:');
            if (notes !== null) {
                $.ajax({
                    url: '/Admin/UpdateBorrowNotes',
                    type: 'POST',
                    data: {
                        id: borrowId,
                        notes: notes
                    },
                    success: function(response) {
                        if (response.success) {
                            showToast('success', 'Cập nhật ghi chú thành công!');
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showToast('error', response.message || 'Không thể cập nhật ghi chú');
                        }
                    },
                    error: function(xhr, status, error) {
                        showToast('error', 'Có lỗi xảy ra khi cập nhật ghi chú');
                    }
                });
            }
        }

        // Status update confirmation function
        function confirmUpdateBorrowStatus(borrowId, status, userName, bookTitle) {
            currentStatusUpdate = {
                borrowId: borrowId,
                status: status,
                userName: userName,
                bookTitle: bookTitle
            };

            const statusDisplayMap = {
                'Requested': 'Đã đăng ký',
                'Borrowed': 'Đang mượn', 
                'Returned': 'Đã trả',
                'Cancelled': 'Đã hủy',
                'Lost': 'Mất sách',
                'Damaged': 'Hư hỏng',
                'Overdue': 'Quá hạn'
            };

            const statusDisplay = statusDisplayMap[status] || status;
            const statusColor = {
                'Returned': 'success',
                'Borrowed': 'primary', 
                'Overdue': 'warning',
                'Cancelled': 'danger',
                'Lost': 'dark',
                'Damaged': 'dark'
            }[status] || 'secondary';

            $('#statusUpdateDetails').html(`
                <div class="row">
                    <div class="col-12">
                        <div class="card border-0 bg-light">
                            <div class="card-body">
                                <h6 class="card-title">Thông tin giao dịch</h6>
                                <p class="mb-1"><strong>Người mượn:</strong> ${userName}</p>
                                <p class="mb-1"><strong>Sách:</strong> ${bookTitle}</p>
                                <p class="mb-0"><strong>Trạng thái mới:</strong> <span class="badge bg-${statusColor}">${statusDisplay}</span></p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="alert alert-warning mt-3">
                    <strong>Xác nhận:</strong> Bạn có chắc chắn muốn cập nhật trạng thái thành <strong>"${statusDisplay}"</strong>?
                </div>
            `);

            // Clear previous notes
            $('#statusUpdateNotes').val('');
            
            // Show modal
            $('#statusUpdateModal').modal('show');
        }

        // Handle status update confirmation
        $('#confirmStatusUpdate').on('click', function() {
            if (currentStatusUpdate) {
                const notes = $('#statusUpdateNotes').val().trim();
                $('#statusUpdateModal').modal('hide');
                updateBorrowStatus(currentStatusUpdate.borrowId, currentStatusUpdate.status, notes);
                currentStatusUpdate = null;
            }
        });

        // Enhanced status update function with better error handling
        function updateBorrowStatus(borrowId, status, notes = '') {
            console.log('Updating borrow status:', { borrowId, status, notes });
            
            $.ajax({
                url: '/Admin/UpdateBorrowStatus',
                type: 'POST',
                data: {
                    id: borrowId,
                    status: status,
                    notes: notes
                },
                beforeSend: function() {
                    console.log('Sending request to update borrow status...');
                },
                success: function(response) {
                    console.log('Update response:', response);
                    if (response.success) {
                        const statusDisplayMap = {
                            'Requested': 'Đã đăng ký',
                            'Borrowed': 'Đang mượn', 
                            'Returned': 'Đã trả',
                            'Cancelled': 'Đã hủy',
                            'Lost': 'Mất sách',
                            'Damaged': 'Hư hỏng'
                        };
                        showToast('success', `Cập nhật trạng thái thành "${statusDisplayMap[status] || status}" thành công!`);
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        // Hiển thị thông báo lỗi validation chi tiết
                        console.error('Update failed:', response.message);
                        showToast('error', response.message || 'Không thể cập nhật trạng thái');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Error:', { xhr, status, error });
                    console.error('Response Text:', xhr.responseText);
                    
                    let errorMessage = 'Có lỗi xảy ra khi cập nhật trạng thái';
                    
                    try {
                        const response = JSON.parse(xhr.responseText);
                        if (response && response.message) {
                            errorMessage = response.message;
                        }
                    } catch (e) {
                        // Ignore parsing error
                    }
                    
                    showToast('error', errorMessage);
                }
            });
        }

        // Toast notification function
        function showToast(type, message) {
            const toastHtml = `
                <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            
            // Create toast container if it doesn't exist
            if (!$('#toastContainer').length) {
                $('body').append('<div id="toastContainer" class="toast-container position-fixed end-0 p-3" style="top: 80px; z-index: 1055;"></div>');
            }
            
            const $toast = $(toastHtml);
            $('#toastContainer').append($toast);
            
            const toast = new bootstrap.Toast($toast[0]);
            toast.show();
            
            // Remove toast element after it's hidden
            $toast.on('hidden.bs.toast', function() {
                $(this).remove();
            });
        }
    </script>
}