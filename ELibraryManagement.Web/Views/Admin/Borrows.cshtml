@model List<BorrowRecordViewModel>

@{
    ViewData["Title"] = "Quản lý mượn sách - E-Library";
    Layout = "_AdminLayout";
}

<!-- Page Header -->
<div class="row mb-4">
    <div class="col-12">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h2 class="h3 mb-0">
                        <i class="fas fa-clipboard-list me-2 text-info"></i>
                        Quản lý mượn sách
                    </h2>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item">
                                <a asp-action="Index">Quản trị</a>
                            </li>
                            <li class="breadcrumb-item active">Mượn sách</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Row -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Tổng lượt mượn</div>
                            <div class="h4 mb-0">@Model.Count</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-clipboard-list fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Đang mượn</div>
                            <div class="h4 mb-0">@Model.Count(b => b.Status == "Borrowed")</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-hand-holding fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Quá hạn</div>
                            <div class="h4 mb-0">@Model.Count(b => b.IsOverdue)</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-exclamation-triangle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="small">Đã trả</div>
                            <div class="h4 mb-0">@Model.Count(b => b.Status == "Returned")</div>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-check-circle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Borrow Records Table -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-light">
                    <div class="d-flex align-items-center justify-content-between">
                        <h5 class="mb-0">Danh sách mượn sách</h5>
                        <div class="d-flex">
                            <div class="input-group input-group-sm me-3" style="width: 300px;">
                                <input type="text" class="form-control" placeholder="Tìm kiếm..." id="searchInput">
                                <button class="btn btn-outline-secondary" type="button">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                            <select class="form-select form-select-sm" id="statusFilter" style="width: 150px;">
                                <option value="">Tất cả trạng thái</option>
                                <option value="borrowed">Đang mượn</option>
                                <option value="overdue">Quá hạn</option>
                                <option value="returned">Đã trả</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="borrowsTable">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col">Người mượn</th>
                                    <th scope="col">Sách</th>
                                    <th scope="col">Ngày mượn</th>
                                    <th scope="col">Hạn trả</th>
                                    <th scope="col">Ngày trả</th>
                                    <th scope="col">Trạng thái</th>
                                    <th scope="col">Phí phạt</th>
                                    <th scope="col">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var borrow in Model.OrderByDescending(b => b.BorrowDate))
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar avatar-sm me-2">
                                                    <i class="fas fa-user-circle fa-2x text-muted"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-0">@borrow.UserName</h6>
                                                    <small class="text-muted">@borrow.UserEmail</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div>
                                                <h6 class="mb-1">@borrow.BookTitle</h6>
                                                <small class="text-muted">@borrow.BookAuthor</small>
                                            </div>
                                        </td>
                                        <td>
                                            <small>@borrow.BorrowDate.ToString("dd/MM/yyyy")</small>
                                        </td>
                                        <td>
                                            <small class="@(borrow.IsOverdue ? "text-danger fw-bold" : "")">
                                                @borrow.DueDate.ToString("dd/MM/yyyy")
                                            </small>
                                        </td>
                                        <td>
                                            @if (borrow.ReturnDate.HasValue)
                                            {
                                                <small>@borrow.ReturnDate.Value.ToString("dd/MM/yyyy")</small>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Chưa trả</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-@borrow.StatusClass">@borrow.StatusDisplay</span>
                                            @if (borrow.IsOverdue)
                                            {
                                                <br><small class="text-danger">Quá hạn @borrow.OverdueDays ngày</small>
                                            }
                                        </td>
                                        <td>
                                            @if (borrow.FineAmount.HasValue && borrow.FineAmount.Value > 0)
                                            {
                                                <span class="fw-bold text-danger">@borrow.FineAmount.Value.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Không có phạt</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button type="button" class="btn btn-sm btn-outline-primary" title="Xem chi tiết" onclick="viewBorrow(@borrow.Id)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                @if (borrow.Status == "Borrowed")
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-success" title="Xác nhận trả sách" onclick="returnBook(@borrow.Id, '@borrow.UserName', '@borrow.BookTitle')">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                }
                                                @if (borrow.IsOverdue && borrow.Status == "Borrowed")
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-warning" title="Gửi nhắc nhở" onclick="sendReminder(@borrow.Id, '@borrow.UserEmail')">
                                                        <i class="fas fa-bell"></i>
                                                    </button>
                                                }
                                                <div class="btn-group" role="group">
                                                    <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                                                        <i class="fas fa-cog"></i>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        @if (borrow.Status == "Borrowed")
                                                        {
                                                            <li><a class="dropdown-item" href="#" onclick="extendDue(@borrow.Id)"><i class="fas fa-calendar-plus me-2"></i>Gia hạn</a></li>
                                                        }
                                                        <li><a class="dropdown-item" href="#" onclick="viewHistory('@borrow.UserId')"><i class="fas fa-history me-2"></i>Lịch sử mượn</a></li>
                                                        @if (!string.IsNullOrEmpty(borrow.Notes))
                                                        {
                                                            <li><hr class="dropdown-divider"></li>
                                                            <li><a class="dropdown-item" href="#" onclick="viewNotes(@borrow.Id)"><i class="fas fa-sticky-note me-2"></i>Xem ghi chú</a></li>
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted">
                            Hiển thị @Model.Count giao dịch mượn
                        </small>
                        <nav>
                            <ul class="pagination pagination-sm mb-0">
                                <li class="page-item disabled">
                                    <span class="page-link">Trước</span>
                                </li>
                                <li class="page-item active">
                                    <span class="page-link">1</span>
                                </li>
                                <li class="page-item disabled">
                                    <span class="page-link">Sau</span>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Extend Due Date Modal -->
<div class="modal fade" id="extendModal" tabindex="-1" aria-labelledby="extendModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="extendModalLabel">Gia hạn ngày trả</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="extendForm">
                    <div class="mb-3">
                        <label for="currentDueDate" class="form-label">Ngày hiện tại</label>
                        <input type="text" class="form-control" id="currentDueDate" readonly>
                    </div>
                    <div class="mb-3">
                        <label for="newDueDate" class="form-label">Ngày gia hạn mới</label>
                        <input type="date" class="form-control" id="newDueDate" required>
                    </div>
                    <div class="mb-3">
                        <label for="extendReason" class="form-label">Lý do gia hạn (tùy chọn)</label>
                        <textarea class="form-control" id="extendReason" rows="3" placeholder="Nhập lý do gia hạn..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-warning" id="confirmExtend">Gia hạn</button>
            </div>
        </div>
    </div>
</div>

<!-- View Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Chi tiết giao dịch mượn</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="borrowDetails">
                    <!-- Details will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

<!-- Return Book Modal -->
<div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnModalLabel">Xác nhận trả sách</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Xác nhận người dùng đã trả sách?</p>
                <div id="returnDetails"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-success" id="confirmReturn">Xác nhận trả</button>
            </div>
        </div>
    </div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Search functionality
            $('#searchInput').on('keyup', function() {
                var value = $(this).val().toLowerCase();
                $('#borrowsTable tbody tr').filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });

            // Status filter
            $('#statusFilter').on('change', function() {
                var value = $(this).val();
                $('#borrowsTable tbody tr').filter(function() {
                    if (value === '') {
                        $(this).show();
                    } else {
                        var statusText = $(this).find('.badge').text().toLowerCase();
                        if (value === 'borrowed') {
                            $(this).toggle(statusText.indexOf('đang mượn') > -1);
                        } else if (value === 'overdue') {
                            $(this).toggle(statusText.indexOf('quá hạn') > -1);
                        } else if (value === 'returned') {
                            $(this).toggle(statusText.indexOf('đã trả') > -1);
                        }
                    }
                });
            });
        });

        let currentBorrowId = null;

        function viewBorrow(borrowId) {
            // Show borrow details in modal
            $('#detailsModal').modal('show');
            
            // You would fetch details from API here
            $('#borrowDetails').html('<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>');
            
            // Simulate loading details
            setTimeout(function() {
                $('#borrowDetails').html(`
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Thông tin người mượn</h6>
                            <p><strong>Họ tên:</strong> Loading...</p>
                            <p><strong>Email:</strong> Loading...</p>
                            <p><strong>Số điện thoại:</strong> Loading...</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Thông tin sách</h6>
                            <p><strong>Tên sách:</strong> Loading...</p>
                            <p><strong>Tác giả:</strong> Loading...</p>
                            <p><strong>ISBN:</strong> Loading...</p>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-12">
                            <h6>Thông tin mượn trả</h6>
                            <p><strong>Ngày mượn:</strong> Loading...</p>
                            <p><strong>Ngày đến hạn:</strong> Loading...</p>
                            <p><strong>Trạng thái:</strong> Loading...</p>
                            <p><strong>Ghi chú:</strong> Loading...</p>
                        </div>
                    </div>
                `);
            }, 1000);
        }

        function returnBook(borrowId, userName, bookTitle) {
            currentBorrowId = borrowId;
            $('#returnDetails').html(`
                <strong>Người mượn:</strong> ${userName}<br>
                <strong>Sách:</strong> ${bookTitle}
            `);
            $('#returnModal').modal('show');
        }

        $('#confirmReturn').on('click', function() {
            if (currentBorrowId) {
                // Call API to confirm return
                const token = localStorage.getItem('token');
                
                $.ajax({
                    url: `/Admin/ConfirmReturn`,
                    type: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    data: {
                        borrowId: currentBorrowId
                    },
                    success: function(response) {
                        $('#returnModal').modal('hide');
                        showToast('success', 'Sách đã được xác nhận trả thành công!');
                        setTimeout(() => location.reload(), 1500);
                    },
                    error: function(xhr) {
                        showToast('error', 'Có lỗi xảy ra khi xác nhận trả sách: ' + xhr.responseText);
                    }
                });
            }
        });

        function sendReminder(borrowId, userEmail) {
            const token = localStorage.getItem('token');
            
            $.ajax({
                url: `/Admin/SendReminder`,
                type: 'POST',
                headers: {
                    'Authorization': 'Bearer ' + token
                },
                data: {
                    borrowId: borrowId
                },
                success: function(response) {
                    showToast('success', `Đã gửi email nhắc nhở đến ${userEmail}`);
                },
                error: function(xhr) {
                    showToast('error', 'Có lỗi xảy ra khi gửi email nhắc nhở: ' + xhr.responseText);
                }
            });
        }

        function extendDue(borrowId) {
            currentBorrowId = borrowId;
            
            // Get current due date from the table row
            const row = $(`button[onclick*="${borrowId}"]`).closest('tr');
            const currentDate = row.find('td:nth-child(5)').text().trim(); // Due date column
            
            $('#currentDueDate').val(currentDate);
            
            // Set minimum date to tomorrow
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            $('#newDueDate').attr('min', tomorrow.toISOString().split('T')[0]);
            
            $('#extendModal').modal('show');
        }

        $('#confirmExtend').on('click', function() {
            if (currentBorrowId) {
                const newDueDate = $('#newDueDate').val();
                const reason = $('#extendReason').val();
                
                if (!newDueDate) {
                    showToast('error', 'Vui lòng chọn ngày gia hạn mới');
                    return;
                }
                
                const token = localStorage.getItem('token');
                
                $.ajax({
                    url: `/Admin/ExtendDueDate`,
                    type: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    data: {
                        borrowId: currentBorrowId,
                        newDueDate: newDueDate,
                        reason: reason
                    },
                    success: function(response) {
                        $('#extendModal').modal('hide');
                        showToast('success', 'Đã gia hạn thành công!');
                        setTimeout(() => location.reload(), 1500);
                    },
                    error: function(xhr) {
                        showToast('error', 'Có lỗi xảy ra khi gia hạn: ' + xhr.responseText);
                    }
                });
            }
        });

        function viewHistory(userId) {
            // Redirect to user history page or show in modal
            showToast('info', 'Chức năng xem lịch sử sẽ được triển khai sau');
        }

        function viewNotes(borrowId) {
            // Show notes in modal or tooltip
            showToast('info', 'Hiển thị ghi chú cho giao dịch #' + borrowId);
        }

        // Toast notification function
        function showToast(type, message) {
            const toastHtml = `
                <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            
            // Create toast container if it doesn't exist
            if (!$('#toastContainer').length) {
                $('body').append('<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3"></div>');
            }
            
            const $toast = $(toastHtml);
            $('#toastContainer').append($toast);
            
            const toast = new bootstrap.Toast($toast[0]);
            toast.show();
            
            // Remove toast element after it's hidden
            $toast.on('hidden.bs.toast', function() {
                $(this).remove();
            });
        }
    </script>
}