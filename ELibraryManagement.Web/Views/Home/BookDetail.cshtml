@using ELibraryManagement.Web.Models
@model BookViewModel
@{
    ViewData["Title"] = $"{Model.Title} - Chi Ti·∫øt S√°ch";
}

@section Styles {
    <link rel="stylesheet" href="~/css/book-detail.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Be+Vietnam+Pro:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
}

<!-- Breadcrumb Navigation -->
<nav aria-label="breadcrumb" class="breadcrumb-nav">
    <div class="container">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="@Url.Action("Index", "Home")">
                    <i class="fas fa-home me-1"></i>Trang Ch·ªß
                </a>
            </li>
            <li class="breadcrumb-item">
                <a href="@Url.Action("Books", "Home")">
                    <i class="fas fa-book me-1"></i>Danh S√°ch S√°ch
                </a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Title</li>
        </ol>
    </div>
</nav>

<!-- Main Book Detail Section -->
<div class="container book-detail-container">
    <div class="row">
        <!-- Book Image and Quick Actions -->
        <div class="col-lg-5 mb-4">
            <div class="book-image-section">
                <div class="book-cover-wrapper">
                    <img src="@Model.ImageUrl" 
                         alt="@Model.Title" 
                         class="book-cover"
                         onerror="this.src='/images/default-book-cover.jpg'">
                    <div class="book-badge">
                        @if (Model.AvailableCopies > 0)
                        {
                            <span class="badge-available">üìö C√≥ S·∫µn</span>
                        }
                        else
                        {
                            <span class="badge-unavailable">‚ùå H·∫øt S√°ch</span>
                        }
                    </div>
                </div>
                
                <!-- Quick Actions -->
                <div class="quick-actions mt-4">
                    @if (Model.AvailableCopies > 0)
                    {
                        <button class="btn btn-borrow btn-lg w-100 mb-3" onclick="borrowBook(@Model.Id)">
                            <i class="fas fa-book-reader me-2"></i>
                            M∆∞·ª£n S√°ch Ngay
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-unavailable btn-lg w-100 mb-3" disabled>
                            <i class="fas fa-clock me-2"></i>
                            ƒê·∫∑t H√†ng Ch·ªù
                        </button>
                    }
                    
                    <div class="row">
                        <div class="col-6">
                            <button class="btn btn-outline-primary w-100" onclick="addToWishlist(@Model.Id)">
                                <i class="fas fa-heart me-1"></i>Y√™u Th√≠ch
                            </button>
                        </div>
                        <div class="col-6">
                            <button class="btn btn-outline-secondary w-100" onclick="shareBook(@Model.Id)">
                                <i class="fas fa-share-alt me-1"></i>Chia S·∫ª
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Book Stats -->
                <div class="book-stats mt-4">
                    <div class="stat-item">
                        <div class="stat-label">ƒê√°nh Gi√°</div>
                        <div class="stat-value">
                            <div class="rating-display">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= Model.AverageRating)
                                    {
                                        <i class="fas fa-star text-warning"></i>
                                    }
                                    else if (i - 0.5 <= (double)Model.AverageRating)
                                    {
                                        <i class="fas fa-star-half-alt text-warning"></i>
                                    }
                                    else
                                    {
                                        <i class="far fa-star text-muted"></i>
                                    }
                                }
                                <span class="rating-text ms-2">@Model.AverageRating.ToString("F1")/5.0</span>
                            </div>
                            <small class="text-muted">(@Model.RatingCount l∆∞·ª£t ƒë√°nh gi√°)</small>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-label">T√¨nh Tr·∫°ng</div>
                        <div class="stat-value">
                            <span class="available-info">
                                @Model.AvailableCopies/@Model.TotalCopies cu·ªën c√≥ s·∫µn
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Book Information -->
        <div class="col-lg-7">
            <div class="book-info-section">
                <div class="book-header">
                    <h1 class="book-title">@Model.Title</h1>
                    <p class="book-author">
                        <i class="fas fa-user-edit me-2 text-primary"></i>
                        T√°c gi·∫£: <strong>@Model.Author</strong>
                    </p>
                    
                    @if (Model.RentalPrice.HasValue)
                    {
                        <div class="book-price">
                            <span class="price-label">Ph√≠ m∆∞·ª£n:</span>
                            <span class="price-value">@Model.RentalPrice.Value.ToString("C0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))</span>
                            <small class="price-note">/ 7 ng√†y</small>
                        </div>
                    }
                </div>

                <!-- Book Description -->
                <div class="book-description">
                    <h5 class="section-title">üìñ M√¥ T·∫£ S√°ch</h5>
                    <p class="description-text">@Model.Description</p>
                </div>

                <!-- Book Details -->
                <div class="book-details">
                    <h5 class="section-title">üìã Th√¥ng Tin Chi Ti·∫øt</h5>
                    <div class="details-grid">
                        <div class="detail-item">
                            <span class="detail-label">üìö Th·ªÉ Lo·∫°i:</span>
                            <span class="detail-value">@Model.CategoryName</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">üè¢ Nh√† Xu·∫•t B·∫£n:</span>
                            <span class="detail-value">@Model.Publisher</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">üìÖ NƒÉm Xu·∫•t B·∫£n:</span>
                            <span class="detail-value">@Model.PublicationYear</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">üî¢ M√£ ISBN:</span>
                            <span class="detail-value">@Model.ISBN</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">üåê Ng√¥n Ng·ªØ:</span>
                            <span class="detail-value">@Model.Language</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">üìÑ S·ªë Trang:</span>
                            <span class="detail-value">@Model.PageCount trang</span>
                        </div>
                    </div>
                </div>

                <!-- Borrowing Information -->
                <div class="borrowing-info">
                    <h5 class="section-title">‚ÑπÔ∏è Th√¥ng Tin M∆∞·ª£n S√°ch</h5>
                    <div class="info-list">
                        <div class="info-item">
                            <i class="fas fa-calendar-alt text-primary me-2"></i>
                            <span>Th·ªùi gian m∆∞·ª£n t·ªëi ƒëa: <strong>14 ng√†y</strong></span>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-redo text-success me-2"></i>
                            <span>C√≥ th·ªÉ gia h·∫°n: <strong>1 l·∫ßn (7 ng√†y)</strong></span>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                            <span>Ph√≠ ph·∫°t qu√° h·∫°n: <strong>5,000ƒë/ng√†y</strong></span>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-shield-alt text-info me-2"></i>
                            <span>B·∫£o hi·ªÉm s√°ch: <strong>ƒê∆∞·ª£c b·ªìi th∆∞·ªùng 100% n·∫øu m·∫•t</strong></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Related Books Section -->
@if (ViewBag.RelatedBooks != null && ((List<BookViewModel>)ViewBag.RelatedBooks).Any())
{
    <div class="related-books-section">
        <div class="container">
            <h3 class="section-title text-center mb-5">
                <i class="fas fa-books me-2"></i>
                S√°ch C√πng Th·ªÉ Lo·∫°i
            </h3>
            <div class="row">
                @foreach (var book in (List<BookViewModel>)ViewBag.RelatedBooks)
                {
                    <div class="col-lg-3 col-md-6 mb-4">
                        <div class="related-book-card">
                            <div class="book-image">
                                <img src="@book.ImageUrl" 
                                     alt="@book.Title" 
                                     onerror="this.src='/images/default-book-cover.jpg'">
                                <div class="book-overlay">
                                    <a href="@Url.Action("BookDetail", new { id = book.Id })" class="btn btn-outline-white btn-sm">
                                        <i class="fas fa-eye me-1"></i>Xem Chi Ti·∫øt
                                    </a>
                                </div>
                            </div>
                            <div class="book-content">
                                <h6 class="book-title">@book.Title</h6>
                                <p class="book-author">@book.Author</p>
                                <div class="book-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= book.AverageRating)
                                        {
                                            <i class="fas fa-star text-warning"></i>
                                        }
                                        else
                                        {
                                            <i class="far fa-star text-muted"></i>
                                        }
                                    }
                                </div>
                                @if (book.RentalPrice.HasValue)
                                {
                                    <div class="book-price">
                                        @book.RentalPrice.Value.ToString("C0", System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        // Borrow book function
        function borrowBook(bookId) {
            // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
            if (!isUserLoggedIn()) {
                Swal.fire({
                    title: 'üîê C·∫ßn ƒêƒÉng Nh·∫≠p',
                    text: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ m∆∞·ª£n s√°ch. Chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#da251e',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'ƒêƒÉng Nh·∫≠p',
                    cancelButtonText: 'H·ªßy',
                    customClass: {
                        popup: 'swal-vietnamese'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/Account/Login';
                    }
                });
                return;
            }

            // Confirm borrow
            Swal.fire({
                title: 'üìö X√°c Nh·∫≠n M∆∞·ª£n S√°ch',
                text: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën m∆∞·ª£n s√°ch "${@Html.Raw(Json.Serialize(Model.Title))}"?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#da251e',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'M∆∞·ª£n Ngay',
                cancelButtonText: 'H·ªßy',
                customClass: {
                    popup: 'swal-vietnamese'
                }
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        // Show loading
                        Swal.fire({
                            title: 'ƒêang x·ª≠ l√Ω...',
                            text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
                            allowOutsideClick: false,
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        // Call API to borrow book
                        const response = await fetch('/api/borrow', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem('jwt_token')}`
                            },
                            body: JSON.stringify({
                                bookId: bookId,
                                borrowDays: 14
                            })
                        });

                        if (response.ok) {
                            Swal.fire({
                                title: 'üéâ M∆∞·ª£n S√°ch Th√†nh C√¥ng!',
                                text: 'S√°ch ƒë√£ ƒë∆∞·ª£c th√™m v√†o danh s√°ch m∆∞·ª£n c·ªßa b·∫°n. H·∫°n tr·∫£: 14 ng√†y k·ªÉ t·ª´ h√¥m nay.',
                                icon: 'success',
                                confirmButtonColor: '#da251e',
                                customClass: {
                                    popup: 'swal-vietnamese'
                                }
                            }).then(() => {
                                // Refresh page to update available copies
                                window.location.reload();
                            });
                        } else {
                            const error = await response.json();
                            Swal.fire({
                                title: '‚ùå L·ªói',
                                text: error.message || 'Kh√¥ng th·ªÉ m∆∞·ª£n s√°ch. Vui l√≤ng th·ª≠ l·∫°i sau.',
                                icon: 'error',
                                confirmButtonColor: '#da251e'
                            });
                        }
                    } catch (error) {
                        Swal.fire({
                            title: '‚ùå L·ªói K·∫øt N·ªëi',
                            text: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.',
                            icon: 'error',
                            confirmButtonColor: '#da251e'
                        });
                    }
                }
            });
        }

        // Add to wishlist function
        function addToWishlist(bookId) {
            Swal.fire({
                title: 'üíù Th√™m V√†o Y√™u Th√≠ch',
                text: 'T√≠nh nƒÉng n√†y s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!',
                icon: 'info',
                confirmButtonColor: '#da251e'
            });
        }

        // Share book function
        function shareBook(bookId) {
            const bookUrl = window.location.href;
            const bookTitle = @Html.Raw(Json.Serialize(Model.Title));
            
            if (navigator.share) {
                navigator.share({
                    title: bookTitle,
                    text: `T√¥i v·ª´a t√¨m th·∫•y cu·ªën s√°ch hay: ${bookTitle}`,
                    url: bookUrl
                }).catch(console.error);
            } else {
                // Fallback: copy to clipboard
                navigator.clipboard.writeText(bookUrl).then(() => {
                    Swal.fire({
                        title: 'üìã ƒê√£ Sao Ch√©p',
                        text: 'Link s√°ch ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard!',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });
                });
            }
        }

        // Check if user is logged in
        function isUserLoggedIn() {
            // This would typically check for a JWT token or session
            return localStorage.getItem('jwt_token') !== null;
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Add smooth scrolling to related books
            const relatedBooksCards = document.querySelectorAll('.related-book-card');
            relatedBooksCards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-5px)';
                });
                card.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                });
            });

            // Book cover animation
            const bookCover = document.querySelector('.book-cover');
            bookCover.addEventListener('mouseenter', function() {
                this.style.transform = 'scale(1.05) rotateY(5deg)';
            });
            bookCover.addEventListener('mouseleave', function() {
                this.style.transform = 'scale(1) rotateY(0deg)';
            });
        });
    </script>
    
    <!-- SweetAlert2 for beautiful alerts -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
}
