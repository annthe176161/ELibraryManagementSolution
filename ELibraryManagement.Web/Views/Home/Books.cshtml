@model List<ELibraryManagement.Web.Models.BookViewModel>
@{
    ViewData["Title"] = "Th∆∞ Vi·ªán S√°ch Vi·ªát Nam - Kho T√†ng Tri Th·ª©c";
}

@section Styles {
    <link rel="stylesheet" href="~/css/books.css" asp-append-version="true">
    <link href="https://fonts.googleapis.com/css2?family=Be+Vietnam+Pro:wght@300;400;500;600;700&display=swap"
        rel="stylesheet">
}

<!-- Page Header -->
<section class="books-header">
    <div class="container">
        <div class="row justify-content-center text-center">
            <div class="col-lg-8">
                <h1>üìö Th∆∞ Vi·ªán S√°ch Vi·ªát Nam</h1>
                <p>Kh√°m ph√° kho t√†ng tri th·ª©c v·ªõi h√†ng ngh√¨n ƒë·∫ßu s√°ch ch·∫•t l∆∞·ª£ng t·ª´ kh·∫Øp th·∫ø gi·ªõi</p>
            </div>
        </div>
    </div>
</section>

<!-- Filter Section -->
<div class="container">
    <div class="filter-section">
        <h3 class="filter-title">
            <i class="fas fa-filter"></i>
            T√¨m Ki·∫øm & L·ªçc S√°ch
        </h3>

        <form method="get" action="@Url.Action("Books", "Home")" class="filter-form">
            <div class="row">
                <!-- Search -->
                <div class="col-md-6 mb-3">
                    <label class="form-label">
                        <i class="fas fa-search"></i>
                        T√¨m ki·∫øm s√°ch
                    </label>
                    <input type="text" name="search" class="form-control"
                        placeholder="Nh·∫≠p t√™n s√°ch, t√°c gi·∫£ ho·∫∑c t·ª´ kh√≥a..." value="@ViewBag.Search">
                </div>

                <!-- Category Filter -->
                <div class="col-md-6 mb-3">
                    <label class="form-label">
                        <i class="fas fa-tags"></i>
                        Th·ªÉ lo·∫°i
                    </label>
                    <select name="category" class="form-select">
                        <option value="">-- T·∫•t c·∫£ th·ªÉ lo·∫°i --</option>
                        @if (ViewBag.Categories != null)
                        {
                            foreach (string category in ViewBag.Categories)
                            {
                                var isSelected = ViewBag.Category == category;
                                <option value="@category" selected="@isSelected">
                                    @category
                                </option>
                            }
                        }
                    </select>
                </div>

                <!-- Author Filter -->
                <div class="col-md-6 mb-3">
                    <label class="form-label">
                        <i class="fas fa-user-edit"></i>
                        T√°c gi·∫£
                    </label>
                    <select name="author" class="form-select">
                        <option value="">-- T·∫•t c·∫£ t√°c gi·∫£ --</option>
                        @if (ViewBag.Authors != null)
                        {
                            foreach (string author in ViewBag.Authors)
                            {
                                var isSelected = ViewBag.Author == author;
                                <option value="@author" selected="@isSelected">
                                    @author
                                </option>
                            }
                        }
                    </select>
                </div>

                <!-- Sort By -->
                <div class="col-md-6 mb-3">
                    <label class="form-label">
                        <i class="fas fa-sort"></i>
                        S·∫Øp x·∫øp theo
                    </label>
                    <select name="sortBy" class="form-select">
                        <option value="title" selected="@(ViewBag.SortBy == "title")">T√™n s√°ch (A-Z)</option>
                        <option value="title_desc" selected="@(ViewBag.SortBy == "title_desc")">T√™n s√°ch (Z-A)</option>
                        <option value="author" selected="@(ViewBag.SortBy == "author")">T√°c gi·∫£ (A-Z)</option>
                        <option value="author_desc" selected="@(ViewBag.SortBy == "author_desc")">T√°c gi·∫£ (Z-A)</option>
                        <option value="year" selected="@(ViewBag.SortBy == "year")">NƒÉm xu·∫•t b·∫£n (M·ªõi nh·∫•t)</option>
                        <option value="year_asc" selected="@(ViewBag.SortBy == "year_asc")">NƒÉm xu·∫•t b·∫£n (C≈© nh·∫•t)
                        </option>
                        <option value="price" selected="@(ViewBag.SortBy == "price")">Gi√° (Th·∫•p ƒë·∫øn cao)</option>
                        <option value="price_desc" selected="@(ViewBag.SortBy == "price_desc")">Gi√° (Cao ƒë·∫øn th·∫•p)
                        </option>
                    </select>
                </div>

                <!-- Price Range -->
                <div class="col-md-3 mb-3">
                    <label class="form-label">
                        <i class="fas fa-dollar-sign"></i>
                        Gi√° t·ª´ (VND)
                    </label>
                    <input type="number" name="minPrice" class="form-control" placeholder="0" min="0" step="1000"
                        value="@ViewBag.MinPrice">
                </div>

                <div class="col-md-3 mb-3">
                    <label class="form-label">
                        <i class="fas fa-dollar-sign"></i>
                        Gi√° ƒë·∫øn (VND)
                    </label>
                    <input type="number" name="maxPrice" class="form-control" placeholder="1000000" min="0" step="1000"
                        value="@ViewBag.MaxPrice">
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="filter-buttons">
                <button type="submit" class="btn-filter">
                    <i class="fas fa-search"></i>
                    T√¨m Ki·∫øm
                </button>
                <a href="@Url.Action("Books", "Home")" class="btn-clear">
                    <i class="fas fa-eraser"></i>
                    X√≥a B·ªô L·ªçc
                </a>
            </div>
        </form>
    </div>

    <!-- Results Section -->
    <div class="results-header">
        <div class="results-count">
            <i class="fas fa-book"></i>
            T√¨m th·∫•y <strong>@Model.Count</strong> cu·ªën s√°ch
        </div>
    </div>

    <!-- Books Grid -->
    @if (Model.Any())
    {
        <div class="books-grid">
            @foreach (var book in Model)
            {
                <div class="book-card">
                    <div class="card-img-container">
                        @if (!string.IsNullOrEmpty(book.ImageUrl))
                        {
                            <img src="@book.ImageUrl" class="card-img-top" alt="@book.Title"
                                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                        }
                        <div class="placeholder-image"
                            style="display: @(string.IsNullOrEmpty(book.ImageUrl) ? "flex" : "none");">
                            <i class="fas fa-book fa-3x"></i>
                            <span>Kh√¥ng c√≥ ·∫£nh b√¨a</span>
                        </div>

                        @if (book.AvailableCopies > 0)
                        {
                            <div class="book-badge">C√≤n @book.AvailableCopies cu·ªën</div>
                        }
                        else
                        {
                            <div class="book-badge" style="background: #dc3545;">H·∫øt s√°ch</div>
                        }
                    </div>

                    <div class="card-body">
                        <h5 class="card-title">
                            <a href="@Url.Action("BookDetail", "Home", new { id = book.Id })" class="book-title-link">
                                @book.Title
                            </a>
                        </h5>

                        <p class="card-text text-muted">
                            <i class="fas fa-user"></i>
                            <strong>T√°c gi·∫£:</strong> @book.Author
                        </p>

                        <p class="card-text text-muted">
                            <i class="fas fa-tag"></i>
                            <strong>Th·ªÉ lo·∫°i:</strong> @book.CategoryName
                        </p>

                        @if (book.PublicationYear > 0)
                        {
                            <p class="card-text text-muted">
                                <i class="fas fa-calendar"></i>
                                <strong>NƒÉm XB:</strong> @book.PublicationYear
                            </p>
                        }

                        @if (!string.IsNullOrEmpty(book.Description))
                        {
                            <p class="card-text">
                                @(book.Description.Length > 120 ? book.Description.Substring(0, 120) + "..." : book.Description)
                            </p>
                        }

                        <div class="book-info">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <small class="availability @(book.AvailableCopies > 0 ? "text-success" : "text-danger")">
                                    <i class="fas fa-copy"></i>
                                    @if (book.AvailableCopies > 0)
                                    {
                                        <span>C√≤n @book.AvailableCopies/@book.TotalCopies cu·ªën</span>
                                    }
                                    else
                                    {
                                        <span>H·∫øt s√°ch (@book.TotalCopies cu·ªën)</span>
                                    }
                                </small>

                                @if (book.RentalPrice.HasValue && book.RentalPrice.Value > 0)
                                {
                                    <small class="text-warning">
                                        <i class="fas fa-money-bill-wave"></i>
                                        @book.RentalPrice.Value.ToString("N0") VND/ng√†y
                                    </small>
                                }
                                else
                                {
                                    <small class="text-info">
                                        <i class="fas fa-gift"></i>
                                        Mi·ªÖn ph√≠
                                    </small>
                                }
                            </div>

                            @if (book.AvailableCopies > 0)
                            {
                                <div class="book-actions">
                                    <a href="@Url.Action("BookDetail", "Home", new { id = book.Id })" class="btn btn-info btn-sm me-2">
                                        <i class="fas fa-eye"></i>
                                        Chi Ti·∫øt
                                    </a>
                                    <button class="btn btn-primary btn-sm" onclick="borrowBook(@book.Id, '@book.Title')">
                                        <i class="fas fa-book-reader"></i>
                                        M∆∞·ª£n Ngay
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="book-actions">
                                    <a href="@Url.Action("BookDetail", "Home", new { id = book.Id })" class="btn btn-info btn-sm me-2">
                                        <i class="fas fa-eye"></i>
                                        Chi Ti·∫øt
                                    </a>
                                    <button class="btn btn-secondary btn-sm" disabled>
                                        <i class="fas fa-ban"></i>
                                        H·∫øt S√°ch
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <i class="fas fa-search"></i>
            <h4>Kh√¥ng t√¨m th·∫•y s√°ch ph√π h·ª£p</h4>
            <p>
                R·∫•t ti·∫øc, ch√∫ng t√¥i kh√¥ng t√¨m th·∫•y cu·ªën s√°ch n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm c·ªßa b·∫°n.
                <br>Vui l√≤ng th·ª≠ l·∫°i v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c ƒëi·ªÅu ch·ªânh b·ªô l·ªçc.
            </p>
            <a href="@Url.Action("Books", "Home")" class="btn-filter" style="margin-top: 20px;">
                <i class="fas fa-refresh"></i>
                Xem T·∫•t C·∫£ S√°ch
            </a>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Function to handle book borrowing
        function borrowBook(bookId, bookTitle) {
            // Check if user is logged in (you can implement this check)
            if (confirm(`B·∫°n c√≥ mu·ªën m∆∞·ª£n s√°ch "${bookTitle}" kh√¥ng?`)) {
                // Show loading state
                const button = event.target;
                const originalText = button.innerHTML;
                button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang x·ª≠ l√Ω...';
                button.disabled = true;

                // TODO: Implement actual borrow functionality via API
                // For now, just show a message
                setTimeout(() => {
                    alert(`T√≠nh nƒÉng m∆∞·ª£n s√°ch ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!\n\nS√°ch: ${bookTitle}\nM√£ s√°ch: ${bookId}\n\nVui l√≤ng li√™n h·ªá th·ªß th∆∞ ƒë·ªÉ m∆∞·ª£n s√°ch.`);

                    // Restore button state
                    button.innerHTML = originalText;
                    button.disabled = false;
                }, 1000);
            }
        }

        // Auto-submit form when sort option changes
        document.querySelector('select[name="sortBy"]').addEventListener('change', function () {
            this.form.submit();
        });

        // Smooth scroll to results when filter is applied
        if (window.location.search) {
            setTimeout(() => {
                const resultsSection = document.querySelector('.results-header');
                if (resultsSection) {
                    resultsSection.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            }, 100);
        }

        // Add loading animation to filter form
        document.querySelector('.filter-form').addEventListener('submit', function () {
            const submitButton = this.querySelector('.btn-filter');
            const originalText = submitButton.innerHTML;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang t√¨m ki·∫øm...';
            submitButton.disabled = true;
        });

        // Image lazy loading fallback
        document.querySelectorAll('.card-img-top').forEach(img => {
            img.addEventListener('error', function () {
                this.style.display = 'none';
                this.nextElementSibling.style.display = 'flex';
            });
        });

        // Add animation to book cards on scroll
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -100px 0px'
        };

        const observer = new IntersectionObserver(function (entries) {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);

        // Initialize animations
        document.querySelectorAll('.book-card').forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(30px)';
            card.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;
            observer.observe(card);
        });
    </script>
}
