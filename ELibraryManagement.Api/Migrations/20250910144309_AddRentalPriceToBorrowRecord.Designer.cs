// <auto-generated />
using System;
using ELibraryManagement.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ELibraryManagement.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250910144309_AddRentalPriceToBorrowRecord")]
    partial class AddRentalPriceToBorrowRecord
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ELibraryManagement.Api.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ISBN")
                        .IsUnique()
                        .HasFilter("[ISBN] IS NOT NULL");

                    b.HasIndex("Title", "Author");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Dale Carnegie",
                            AvailableQuantity = 8,
                            AverageRating = 4.5,
                            CoverImageUrl = "/images/dac-nhan-tam.jpg",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4623),
                            Description = "Cuốn sách về nghệ thuật giao tiếp và thu phục lòng người",
                            ISBN = "9786047770560",
                            IsDeleted = false,
                            Language = "Tiếng Việt",
                            PageCount = 320,
                            Price = 89000m,
                            PublicationYear = 2020,
                            Publisher = "Nhà Xuất Bản Tổng Hợp TP.HCM",
                            Quantity = 10,
                            RatingCount = 25,
                            Title = "Đắc Nhân Tâm"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Adam Khoo",
                            AvailableQuantity = 12,
                            AverageRating = 4.3000001907348633,
                            CoverImageUrl = "/images/toi-tai-gioi.jpg",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4627),
                            Description = "Sách về phát triển bản thân và thành công",
                            ISBN = "9786047770577",
                            IsDeleted = false,
                            Language = "Tiếng Việt",
                            PageCount = 280,
                            Price = 95000m,
                            PublicationYear = 2019,
                            Publisher = "Nhà Xuất Bản Trẻ",
                            Quantity = 15,
                            RatingCount = 18,
                            Title = "Tôi Tài Giỏi, Bạn Cũng Thế"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Ngô Tất Tố",
                            AvailableQuantity = 6,
                            AverageRating = 4.6999998092651367,
                            CoverImageUrl = "/images/tat-den.jpg",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4630),
                            Description = "Tác phẩm kinh điển của văn học Việt Nam",
                            ISBN = "9786047770584",
                            IsDeleted = false,
                            Language = "Tiếng Việt",
                            PageCount = 200,
                            Price = 45000m,
                            PublicationYear = 2018,
                            Publisher = "Nhà Xuất Bản Giáo Dục",
                            Quantity = 8,
                            RatingCount = 32,
                            Title = "Tắt Đèn"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Nguyễn Văn A",
                            AvailableQuantity = 10,
                            AverageRating = 4.1999998092651367,
                            CoverImageUrl = "/images/csharp-basic.jpg",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4634),
                            Description = "Sách hướng dẫn lập trình C# từ cơ bản đến nâng cao",
                            ISBN = "9786047770591",
                            IsDeleted = false,
                            Language = "Tiếng Việt",
                            PageCount = 400,
                            Price = 120000m,
                            PublicationYear = 2021,
                            Publisher = "Nhà Xuất Bản Bách Khoa",
                            Quantity = 12,
                            RatingCount = 15,
                            Title = "Lập Trình C# Cơ Bản"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Trần Thị B",
                            AvailableQuantity = 18,
                            AverageRating = 4.4000000953674316,
                            CoverImageUrl = "/images/kinh-doanh-thanh-cong.jpg",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4637),
                            Description = "Những bí quyết thực tế để thành công trong kinh doanh",
                            ISBN = "9786047770607",
                            IsDeleted = false,
                            Language = "Tiếng Việt",
                            PageCount = 350,
                            Price = 110000m,
                            PublicationYear = 2022,
                            Publisher = "Nhà Xuất Bản Lao Động",
                            Quantity = 20,
                            RatingCount = 22,
                            Title = "Bí Quyết Thành Công Trong Kinh Doanh"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Phạm Văn Đồng",
                            AvailableQuantity = 5,
                            AverageRating = 4.5999999046325684,
                            CoverImageUrl = "/images/lich-su-viet-nam.jpg",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4639),
                            Description = "Tổng quan về lịch sử Việt Nam từ cổ đại đến hiện đại",
                            ISBN = "9786047770614",
                            IsDeleted = false,
                            Language = "Tiếng Việt",
                            PageCount = 500,
                            Price = 150000m,
                            PublicationYear = 2017,
                            Publisher = "Nhà Xuất Bản Chính Trị Quốc Gia",
                            Quantity = 6,
                            RatingCount = 28,
                            Title = "Lịch Sử Việt Nam"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Lê Thị C",
                            AvailableQuantity = 22,
                            AverageRating = 4.0999999046325684,
                            CoverImageUrl = "/images/nau-an-ngon.jpg",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4642),
                            Description = "Bộ sưu tập công thức nấu ăn ngon và đơn giản",
                            ISBN = "9786047770621",
                            IsDeleted = false,
                            Language = "Tiếng Việt",
                            PageCount = 280,
                            Price = 85000m,
                            PublicationYear = 2023,
                            Publisher = "Nhà Xuất Bản Phụ Nữ",
                            Quantity = 25,
                            RatingCount = 20,
                            Title = "Công Thức Nấu Ăn Ngon"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Nhiều Tác Giả",
                            AvailableQuantity = 28,
                            AverageRating = 4.8000001907348633,
                            CoverImageUrl = "/images/truyen-co-tich.jpg",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4644),
                            Description = "Tuyển tập truyện cổ tích Việt Nam cho thiếu nhi",
                            ISBN = "9786047770638",
                            IsDeleted = false,
                            Language = "Tiếng Việt",
                            PageCount = 180,
                            Price = 65000m,
                            PublicationYear = 2020,
                            Publisher = "Nhà Xuất Bản Kim Đồng",
                            Quantity = 30,
                            RatingCount = 35,
                            Title = "Truyện Cổ Tích Việt Nam"
                        });
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.BookCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategories");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            CategoryId = 7
                        },
                        new
                        {
                            BookId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            BookId = 3,
                            CategoryId = 8
                        },
                        new
                        {
                            BookId = 4,
                            CategoryId = 6
                        },
                        new
                        {
                            BookId = 5,
                            CategoryId = 7
                        },
                        new
                        {
                            BookId = 6,
                            CategoryId = 4
                        },
                        new
                        {
                            BookId = 7,
                            CategoryId = 10
                        },
                        new
                        {
                            BookId = 8,
                            CategoryId = 9
                        });
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.BorrowRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("RentalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId", "BookId", "BorrowDate");

                    b.ToTable("BorrowRecords");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#FF6B6B",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4423),
                            Description = "Các tác phẩm tiểu thuyết, truyện dài",
                            IsDeleted = false,
                            Name = "Tiểu Thuyết"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#4ECDC4",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4425),
                            Description = "Sách phi hư cấu, sách thực tế",
                            IsDeleted = false,
                            Name = "Phi Tiểu Thuyết"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#45B7D1",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4427),
                            Description = "Sách khoa học và công nghệ",
                            IsDeleted = false,
                            Name = "Khoa Học"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#96CEB4",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4428),
                            Description = "Sách lịch sử và văn hóa",
                            IsDeleted = false,
                            Name = "Lịch Sử"
                        },
                        new
                        {
                            Id = 5,
                            Color = "#FECA57",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4456),
                            Description = "Tiểu sử và hồi ký",
                            IsDeleted = false,
                            Name = "Tiểu Sử"
                        },
                        new
                        {
                            Id = 6,
                            Color = "#FF9FF3",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4457),
                            Description = "Sách lập trình và phát triển phần mềm",
                            IsDeleted = false,
                            Name = "Lập Trình"
                        },
                        new
                        {
                            Id = 7,
                            Color = "#54A0FF",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4459),
                            Description = "Sách kinh doanh và kinh tế",
                            IsDeleted = false,
                            Name = "Kinh Doanh"
                        },
                        new
                        {
                            Id = 8,
                            Color = "#FF8A65",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4460),
                            Description = "Tác phẩm văn học Việt Nam",
                            IsDeleted = false,
                            Name = "Văn Học Việt Nam"
                        },
                        new
                        {
                            Id = 9,
                            Color = "#81C784",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4461),
                            Description = "Sách dành cho thiếu nhi",
                            IsDeleted = false,
                            Name = "Thiếu Nhi"
                        },
                        new
                        {
                            Id = 10,
                            Color = "#FFB74D",
                            CreatedAt = new DateTime(2025, 9, 10, 14, 43, 9, 244, DateTimeKind.Utc).AddTicks(4462),
                            Description = "Sách công thức nấu ăn",
                            IsDeleted = false,
                            Name = "Nấu Ăn"
                        });
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.Fine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BorrowRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EscalationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EscalationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FineDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ReminderCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowRecordId");

                    b.HasIndex("UserId");

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.FineActionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FineId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FineId");

                    b.HasIndex("UserId");

                    b.ToTable("FineActionHistories");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("BookId", "UserId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.UserStatus", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("BlockReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BlockedUntil")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentBorrowCount")
                        .HasColumnType("int");

                    b.Property<int>("MaxBorrowLimit")
                        .HasColumnType("int");

                    b.Property<int>("OverdueFinesCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalOutstandingFines")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserStatuses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.BookCategory", b =>
                {
                    b.HasOne("ELibraryManagement.Api.Models.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELibraryManagement.Api.Models.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.BorrowRecord", b =>
                {
                    b.HasOne("ELibraryManagement.Api.Models.Book", "Book")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ELibraryManagement.Api.Models.ApplicationUser", "User")
                        .WithMany("BorrowRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.Fine", b =>
                {
                    b.HasOne("ELibraryManagement.Api.Models.BorrowRecord", "BorrowRecord")
                        .WithMany("Fines")
                        .HasForeignKey("BorrowRecordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ELibraryManagement.Api.Models.ApplicationUser", "User")
                        .WithMany("Fines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BorrowRecord");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.FineActionHistory", b =>
                {
                    b.HasOne("ELibraryManagement.Api.Models.Fine", "Fine")
                        .WithMany()
                        .HasForeignKey("FineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELibraryManagement.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.Review", b =>
                {
                    b.HasOne("ELibraryManagement.Api.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELibraryManagement.Api.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.UserStatus", b =>
                {
                    b.HasOne("ELibraryManagement.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ELibraryManagement.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ELibraryManagement.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELibraryManagement.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ELibraryManagement.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.ApplicationUser", b =>
                {
                    b.Navigation("BorrowRecords");

                    b.Navigation("Fines");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.Book", b =>
                {
                    b.Navigation("BookCategories");

                    b.Navigation("BorrowRecords");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.BorrowRecord", b =>
                {
                    b.Navigation("Fines");
                });

            modelBuilder.Entity("ELibraryManagement.Api.Models.Category", b =>
                {
                    b.Navigation("BookCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
