using ELibraryManagement.Api.Data;
using ELibraryManagement.Api.Models;
using ELibraryManagement.Api.Services;
using ELibraryManagement.Api.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;

namespace ELibraryManagement.Api.Services.Implementations
{
    public class OverdueProcessingService : IOverdueProcessingService
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<OverdueProcessingService> _logger;
        private readonly OverdueSettings _overdueSettings;

        public OverdueProcessingService(
            ApplicationDbContext context,
            ILogger<OverdueProcessingService> logger,
            IOptions<OverdueSettings> overdueSettings)
        {
            _context = context;
            _logger = logger;
            _overdueSettings = overdueSettings.Value;
        }

        public async Task<int> ProcessOverdueBooksAsync()
        {
            try
            {
                _logger.LogInformation("üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm s√°ch qu√° h·∫°n...");

                // T√¨m t·∫•t c·∫£ borrow records ƒëang m∆∞·ª£n ho·∫∑c ƒë√£ qu√° h·∫°n nh∆∞ng ch∆∞a tr·∫£
                // QUAN TR·ªåNG: Kh√¥ng b·ªè qua nh·ªØng records ƒë√£ c√≥ ph·∫°t ƒë·ªÉ c√≥ th·ªÉ c·∫≠p nh·∫≠t ph·∫°t theo s·ªë ng√†y qu√° h·∫°n th·ª±c t·∫ø
                var overdueBorrowRecords = await _context.BorrowRecords
                    .Include(br => br.User)
                    .Include(br => br.Book)
                    .Include(br => br.Fines)
                    .Where(br => (br.Status == BorrowStatus.Borrowed || br.Status == BorrowStatus.Overdue)
                              && br.ReturnDate == null
                              && br.DueDate < DateTime.UtcNow)
                    .ToListAsync();

                _logger.LogInformation($"üìã T√¨m th·∫•y {overdueBorrowRecords.Count} borrow records qu√° h·∫°n");

                int processedCount = 0;

                foreach (var borrowRecord in overdueBorrowRecords)
                {
                    // Use Vietnam local date to calculate days-overdue (date-only) to avoid off-by-one due to timezones
                    var overdueDays = (DateTimeHelper.VietnamNow().Date - borrowRecord.DueDate.ToVietnamTime().Date).Days;
                    _logger.LogInformation($"üìñ X·ª≠ l√Ω borrow record ID {borrowRecord.Id}: {borrowRecord.Book.Title} - qu√° h·∫°n {overdueDays} ng√†y");

                    var success = await ProcessSingleBorrowRecordAsync(borrowRecord.Id);
                    if (success)
                    {
                        processedCount++;
                    }
                }

                _logger.LogInformation($"‚úÖ Ho√†n th√†nh: ƒê√£ x·ª≠ l√Ω {processedCount}/{overdueBorrowRecords.Count} borrow records qu√° h·∫°n");
                return processedCount;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå L·ªói khi x·ª≠ l√Ω s√°ch qu√° h·∫°n t·ª± ƒë·ªông");
                return 0;
            }
        }

        public async Task<bool> ProcessSingleBorrowRecordAsync(int borrowRecordId)
        {
            try
            {
                var borrowRecord = await _context.BorrowRecords
                    .Include(br => br.User)
                    .Include(br => br.Book)
                    .Include(br => br.Fines)
                    .FirstOrDefaultAsync(br => br.Id == borrowRecordId);

                if (borrowRecord == null)
                {
                    _logger.LogWarning($"Kh√¥ng t√¨m th·∫•y borrow record v·ªõi ID: {borrowRecordId}");
                    return false;
                }

                // Ki·ªÉm tra ƒëi·ªÅu ki·ªán qu√° h·∫°n
                if ((borrowRecord.Status != BorrowStatus.Borrowed && borrowRecord.Status != BorrowStatus.Overdue) ||
                    borrowRecord.ReturnDate != null ||
                    borrowRecord.DueDate >= DateTime.UtcNow)
                {
                    return false; // Kh√¥ng c·∫ßn x·ª≠ l√Ω
                }

                var overdueDays = (DateTimeHelper.VietnamNow().Date - borrowRecord.DueDate.ToVietnamTime().Date).Days;

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh Overdue (n·∫øu ch∆∞a ph·∫£i)
                if (borrowRecord.Status != BorrowStatus.Overdue)
                {
                    borrowRecord.Status = BorrowStatus.Overdue;
                    borrowRecord.UpdatedAt = DateTime.UtcNow;
                }

                // Ki·ªÉm tra xem ƒë√£ c√≥ fine ch∆∞a thanh to√°n cho borrow record n√†y ch∆∞a
                var existingFine = borrowRecord.Fines
                    .FirstOrDefault(f => f.Reason.Contains("Qu√° h·∫°n") && f.Status == FineStatus.Pending);

                var fineAmount = CalculateFineAmount(overdueDays);
                var isNewFine = false;
                var oldAmount = 0m;

                if (existingFine == null)
                {
                    // T·∫°o fine m·ªõi
                    var fine = new Fine
                    {
                        UserId = borrowRecord.UserId, // Th√™m UserId t·ª´ BorrowRecord
                        BorrowRecordId = borrowRecord.Id,
                        Amount = fineAmount,
                        Reason = $"Qu√° h·∫°n {overdueDays} ng√†y - S√°ch: {borrowRecord.Book.Title}",
                        Status = FineStatus.Pending,
                        CreatedAt = DateTime.UtcNow,
                        DueDate = DateTime.UtcNow.AddDays(_overdueSettings.FinePaymentDueDays)
                    };

                    _context.Fines.Add(fine);
                    isNewFine = true;
                    existingFine = fine; // ƒê·ªÉ s·ª≠ d·ª•ng cho vi·ªác ghi l·ªãch s·ª≠ sau

                    _logger.LogInformation($"‚ú® T·∫°o ph·∫°t m·ªõi cho borrow record {borrowRecordId}: {fineAmount:N0} VND ({overdueDays} ng√†y)");
                }
                else
                {
                    // C·∫≠p nh·∫≠t fine hi·ªán t·∫°i theo s·ªë ng√†y qu√° h·∫°n th·ª±c t·∫ø
                    oldAmount = existingFine.Amount;
                    if (existingFine.Amount != fineAmount)
                    {
                        existingFine.Amount = fineAmount;
                        existingFine.Reason = $"Qu√° h·∫°n {overdueDays} ng√†y - S√°ch: {borrowRecord.Book.Title}";
                        existingFine.UpdatedAt = DateTime.UtcNow;

                        _logger.LogInformation($"üîÑ C·∫≠p nh·∫≠t ph·∫°t cho borrow record {borrowRecordId}: {oldAmount:N0} VND ‚Üí {fineAmount:N0} VND ({overdueDays} ng√†y)");
                    }
                    else
                    {
                        _logger.LogInformation($"‚úÖ Ph·∫°t cho borrow record {borrowRecordId} ƒë√£ ƒë√∫ng: {fineAmount:N0} VND ({overdueDays} ng√†y) - kh√¥ng c·∫ßn c·∫≠p nh·∫≠t");
                        return true; // Kh√¥ng c·∫ßn l∆∞u thay ƒë·ªïi
                    }
                }

                await _context.SaveChangesAsync();

                // Ghi log l·ªãch s·ª≠ sau khi ƒë√£ c√≥ FineId
                if (isNewFine)
                {
                    var fineHistory = new FineActionHistory
                    {
                        FineId = existingFine.Id,
                        UserId = borrowRecord.UserId,
                        ActionType = FineActionType.ReminderSent,
                        Description = $"T·∫°o ph·∫°t qu√° h·∫°n {overdueDays} ng√†y",
                        Amount = fineAmount,
                        Notes = $"Ph·∫°t ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông do s√°ch qu√° h·∫°n",
                        ActionDate = DateTime.UtcNow
                    };
                    _context.FineActionHistories.Add(fineHistory);
                }
                else if (oldAmount != fineAmount)
                {
                    var fineHistory = new FineActionHistory
                    {
                        FineId = existingFine.Id,
                        UserId = borrowRecord.UserId,
                        ActionType = FineActionType.ReminderSent,
                        Description = $"C·∫≠p nh·∫≠t ph·∫°t t·ª´ {oldAmount:N0} VND l√™n {fineAmount:N0} VND do tƒÉng th√™m ng√†y qu√° h·∫°n",
                        Amount = fineAmount,
                        Notes = $"C·∫≠p nh·∫≠t t·ª± ƒë·ªông - hi·ªán t·∫°i qu√° h·∫°n {overdueDays} ng√†y",
                        ActionDate = DateTime.UtcNow
                    };
                    _context.FineActionHistories.Add(fineHistory);
                }

                // L∆∞u l·ªãch s·ª≠ n·∫øu c√≥
                if (_context.ChangeTracker.HasChanges())
                {
                    await _context.SaveChangesAsync();
                }

                _logger.LogInformation($"ƒê√£ x·ª≠ l√Ω borrow record {borrowRecordId} qu√° h·∫°n {overdueDays} ng√†y");
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"L·ªói khi x·ª≠ l√Ω borrow record {borrowRecordId}");
                return false;
            }
        }

        public decimal CalculateFineAmount(int overdueDays)
        {
            if (overdueDays <= 0)
                return 0;

            // T√≠nh ph·∫°t c·ªë ƒë·ªãnh: 5,000 VNƒê/ng√†y
            decimal totalFine = overdueDays * _overdueSettings.DailyFine;

            // Gi·ªõi h·∫°n ph·∫°t t·ªëi ƒëa
            return Math.Min(totalFine, _overdueSettings.MaxFineAmount);
        }
    }

    public class OverdueSettings
    {
        public decimal DailyFine { get; set; } = 5000; // 5,000 VNƒê/ng√†y

        public decimal MaxFineAmount { get; set; } = 500000; // Ph·∫°t t·ªëi ƒëa 500,000 VNƒê

        public int FinePaymentDueDays { get; set; } = 30; // H·∫°n thanh to√°n ph·∫°t: 30 ng√†y
    }
}